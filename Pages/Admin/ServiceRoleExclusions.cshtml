@page
@model Assistant.Pages.Admin.ServiceRoleExclusionsModel
@{
    ViewData["Title"] = "Список исключений";
    var lookupUrl = Url.Page(null, pageHandler: "ClientLookup");
}

<div class="kc-header p-5 md:p-6 relative overflow-hidden mb-6">
    <div class="absolute inset-0 pointer-events-none">
        <div class="glow-blob absolute -top-12 left-8 h-40 w-40 rounded-full blur-[70px] opacity-60"
             style="background: radial-gradient(60% 60% at 50% 50%, rgba(14,165,233,.55), rgba(59,130,246,.35))"></div>
        <div class="glow-blob absolute -bottom-16 right-10 h-44 w-44 rounded-full blur-[80px] opacity-40"
             style="background: radial-gradient(60% 60% at 50% 50%, rgba(45,212,191,.6), rgba(99,102,241,.35))"></div>
    </div>

    <div class="relative flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
        <div>
            <h3 class="text-3xl md:text-4xl text-white tracking-tight drop-shadow-[0_6px_18px_rgba(59,130,246,0.25)]">
                Список исключений
            </h3>
            <p class="text-slate-200/80 mt-2 text-sm max-w-2xl">
                Управляйте клиентами Keycloak, для которых запрещено назначать сервисные роли в Assistant.
            </p>
        </div>
    </div>
</div>

<section class="kc-card p-5 mb-6">
    <h4 class="text-lg font-semibold text-slate-200 mb-3">Добавить клиента в исключения</h4>
    <form method="post" asp-page-handler="Add" class="space-y-2" data-soft-transition="#exclusionsList">
        <label for="clientIdInput" class="text-xs uppercase tracking-wide text-slate-400">Client ID</label>
        <div class="flex flex-col gap-3 md:flex-row md:items-center">
            <div class="flex-1">
                <input id="clientIdInput" name="ClientId" placeholder="Начните вводить clientId"
                       autocomplete="off" list="clientIdSuggestions"
                       data-lookup-url="@lookupUrl"
                       data-min-length="2" data-max-results="20"
                       class="w-full rounded-xl bg-white/5 border border-white/10 px-3 py-2 text-sm text-slate-100 placeholder:text-slate-400 focus:outline-none focus:border-white/20" />
                <datalist id="clientIdSuggestions"></datalist>
            </div>
            <button type="submit" class="btn-subtle whitespace-nowrap md:self-center">Добавить</button>
        </div>
        <span class="text-xs text-slate-400">Выберите клиента из списка — будут игнорироваться пустые значения и дубликаты.</span>
    </form>
</section>

<div id="exclusionsList" data-soft-root>
    @if (Model.Exclusions.Count == 0)
    {
        <div class="kc-card p-5 text-sm text-slate-400">
            Список исключений пуст. Добавьте clientId, чтобы запретить выдачу сервисных ролей от этого клиента.
        </div>
    }
    else
    {
        <div class="kc-card p-0 overflow-hidden">
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-white/10 text-lg leading-7">
                    <thead class="bg-white/5 uppercase tracking-wide text-base text-slate-300">
                        <tr>
                            <th class="px-6 py-3 text-left">Client ID</th>
                            <th class="px-6 py-3 text-right">Действия</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-white/10">
                        @foreach (var clientId in Model.Exclusions)
                        {
                            <tr class="hover:bg-white/5 transition">
                                <td class="px-6 py-3 whitespace-nowrap font-mono text-base text-slate-200">@clientId</td>
                                <td class="px-6 py-3 text-right">
                                    <form method="post" asp-page-handler="Remove" class="inline-flex" data-soft-transition="#exclusionsList">
                                        <input type="hidden" name="clientId" value="@clientId" />
                                        <button type="submit" class="btn-danger whitespace-nowrap">Удалить</button>
                                    </form>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script data-soft-nav>
        (() => {
            const input = document.getElementById('clientIdInput');
            if (!input) {
                return;
            }

            const listId = input.getAttribute('list');
            if (!listId) {
                return;
            }

            const dataList = document.getElementById(listId);
            if (!dataList) {
                return;
            }

            const lookupUrl = input.dataset.lookupUrl;
            if (!lookupUrl) {
                return;
            }

            const minLength = parseInt(input.dataset.minLength || '2', 10);
            const maxResults = parseInt(input.dataset.maxResults || '20', 10);
            let lastQuery = '';
            let lastController = null;

            const updateOptions = (values) => {
                const fragment = document.createDocumentFragment();
                for (const value of values) {
                    if (typeof value !== 'string' || value.trim().length === 0) {
                        continue;
                    }
                    const option = document.createElement('option');
                    option.value = value;
                    fragment.appendChild(option);
                }
                dataList.replaceChildren(fragment);
            };

            const fetchSuggestions = async (query) => {
                if (lastController) {
                    lastController.abort();
                }

                lastController = new AbortController();

                try {
                    const resp = await fetch(`${lookupUrl}?q=${encodeURIComponent(query)}`, {
                        signal: lastController.signal,
                        headers: { 'Accept': 'application/json' }
                    });

                    if (!resp.ok) {
                        return;
                    }

                    const payload = await resp.json();
                    const values = Array.isArray(payload)
                        ? payload
                        : Array.isArray(payload?.clients)
                            ? payload.clients
                            : [];

                    const limited = values
                        .map(item => typeof item === 'string' ? item : item?.clientId)
                        .filter(value => typeof value === 'string');

                    updateOptions(limited.slice(0, maxResults));
                } catch (err) {
                    if (err instanceof DOMException && err.name === 'AbortError') {
                        return;
                    }
                    console.error('Не удалось загрузить подсказки clientId', err);
                }
            };

            input.addEventListener('input', (event) => {
                const query = event.target.value.trim();
                if (query === lastQuery) {
                    return;
                }

                lastQuery = query;

                if (query.length < minLength) {
                    updateOptions([]);
                    return;
                }

                fetchSuggestions(query);
            });
        })();
    </script>
}

@section Toasts {
    @if (TempData["FlashOk"] is string ok)
    {
        <div class="kc-toast kc-toast-success" id="flashToastOk" role="alert">
            <div class="kc-toast-icon">✓</div>
            <div class="kc-toast-body">
                <div class="kc-toast-title">@ok</div>
            </div>
            <button type="button" class="kc-toast-close" aria-label="Закрыть" onclick="this.closest('.kc-toast').remove()">×</button>
        </div>
        <script data-soft-nav>setTimeout(() => document.getElementById('flashToastOk')?.remove(), 10000);</script>
    }
    @if (TempData["FlashError"] is string err)
    {
        <div class="kc-toast kc-toast-error" id="flashToastError" role="alert">
            <div class="kc-toast-icon">!</div>
            <div class="kc-toast-body">
                <div class="kc-toast-title">@err</div>
            </div>
            <button type="button" class="kc-toast-close" aria-label="Закрыть" onclick="this.closest('.kc-toast').remove()">×</button>
        </div>
        <script data-soft-nav>setTimeout(() => document.getElementById('flashToastError')?.remove(), 10000);</script>
    }
}
