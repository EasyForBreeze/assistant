@page
@model Assistant.Pages.Clients.DetailsModel
@inject IConfiguration Config
@{
    ViewData["Title"] = "Client details";
    var client = Model.Client;
    string clientId = client.ClientId;
    string realm = client.Realm;
    bool enabled = client.Enabled;
    bool clientAuthInit = client.ClientAuth;
    bool standardInit = client.StandardFlow;
    bool serviceInit = client.ServiceAccount;
    string description = client.Description ?? "";
    string baseUrl = Config["Keycloak:BaseUrl"]!.TrimEnd('/');
}


<!-- Хедер -->
<div class="kc-header p-5 md:p-6 relative overflow-hidden mb-5">
    <div class="flex items-center">
        <a asp-page="/Index" class="text-slate-400 text-sm hover:text-slate-200">&larr; Back to Clients</a>
        <div class="ml-auto text-slate-400 text-sm">Realm: <span class="text-slate-200">@realm</span></div>
    </div>
    <div class="absolute inset-0 pointer-events-none">
        <div class="glow-blob absolute -top-12 left-8 h-40 w-40 rounded-full blur-[70px] opacity-60"
             style="background: radial-gradient(60% 60% at 50% 50%, rgba(16,185,129,.6), rgba(59,130,246,.4))"></div>
        <div class="glow-blob absolute -bottom-16 right-10 h-44 w-44 rounded-full blur-[80px] opacity-40"
             style="background: radial-gradient(60% 60% at 50% 50%, rgba(99,102,241,.65), rgba(45,212,191,.35))"></div>
    </div>

    <div class="relative flex flex-col gap-3 md:flex-row md:items-center md:justify-between">
        <div>
            <h1 class="text-3xl md:text-4xl text-white tracking-tight drop-shadow-[0_6px_18px_rgba(99,102,241,0.25)]">@clientId</h1>
        </div>
        <div class="flex items-center gap-2">
            <span class="text-md text-slate-200">Status</span>
            <label class="kc-switch inline-flex items-center">
                <input type="checkbox" id="swEnabled" @(enabled ? "checked" : "") />
                <span class="track"><span class="dot"></span></span>
            </label>
            <span id="lblEnabled" class="text-sm text-slate-300">@((enabled) ? "Enabled" : "Disabled")</span>
        </div>
    </div>
</div>

<!-- Вкладки -->
<div class="flex flex-wrap gap-2 mb-4" role="tablist" aria-label="Client tabs">
    <button type="button" class="tab-btn active" data-tab="Overview" role="tab" aria-selected="true">Overview</button>
    <button type="button" class="tab-btn" data-tab="Roles" role="tab">Roles</button>
    <button type="button" class="tab-btn" data-tab="ServiceRoles" role="tab">Service Roles</button>
    @*<button type="button" class="tab-btn" data-tab="Scopes" role="tab">Scopes</button>*@
    <button type="button" class="tab-btn" data-tab="Flows" role="tab">Flows</button>
    <button type="button" class="tab-btn" data-tab="Credentials" role="tab">Credentials</button>
    <button type="button" class="tab-btn" data-tab="Endpoints" role="tab">Endpoints</button>
    <button type="button" class="tab-btn" data-tab="Events" role="tab">Events</button>


    <div class="ml-auto flex items-center gap-2">
        <button type="submit" class="btn-danger" title="Удалить клиента" aria-label="Delete">
            <!-- trash icon -->
            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="3 6 5 6 21 6" />
                <path d="M19 6l-1 14a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2L5 6" />
                <path d="M10 11v6" />
                <path d="M14 11v6" />
                <path d="M9 6V4a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v2" />
            </svg>
        </button>
        <button type="submit" class="btn-primary" id="btnSave" title="Сохранить изменения" aria-label="Save">
            <!-- floppy/save icon -->
            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M17 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V7z" />
                <path d="M17 3v4H7V3" />
                <path d="M7 13h10v8H7z" />
            </svg>
        </button>
    </div>
</div>

<!-- Контент вкладок -->
<div class="space-y-4">
    <!-- OVERVIEW -->
    <div class="tab-pane" data-tab="Overview" role="tabpanel">
        <div class="kc-card p-5 kc-hover">
            <div class="grid md:grid-cols-2 md:gap-x-[9.375rem]">
                <div class="space-y-3 justify-self-center w-full">
                    <div class="form-row_small">
                        <label class="text-sm text-slate-400">Client ID</label>
                        <input id="ovClientId" class="kc-input rounded-xl px-3 py-2 text-sm" value="@clientId" />
                    </div>
                    <div class="form-row_small">
                        <label class="text-sm text-slate-400">Description</label>
                        <input id="ovDesc" class="kc-input rounded-xl px-3 py-2 text-sm" value="@description" placeholder="Description..." />
                    </div>
                </div>

                <div class="space-y-3 justify-self-center w-full">
                    <div class="form-row">
                        <label class="text-sm text-slate-400">Client Authentication</label>
                        <label class="kc-switch inline-flex items-center">
                            <input type="checkbox" id="swClientAuth" @(clientAuthInit ? "checked" : "")>
                            <span class="track"><span class="dot"></span></span>
                        </label>
                    </div>
                    <div class="form-row">
                        <label class="text-sm text-slate-400">Standard flow</label>
                        <label class="kc-switch inline-flex items-center">
                            <input type="checkbox" id="swStandard" @(standardInit ? "checked" : "")>
                            <span class="track"><span class="dot"></span></span>
                        </label>
                    </div>
                    <div class="form-row">
                        <label class="text-sm text-slate-400">Service account</label>
                        <label class="kc-switch inline-flex items-center">
                            <input type="checkbox" id="swService" @(serviceInit ? "checked" : "")>
                            <span class="track"><span class="dot"></span></span>
                        </label>
                    </div>
                </div>
            </div>
        </div>

        <!-- Redirect URIs — дизейблится при Standard=false -->
        <div id="redirectPanel" class="kc-card p-5 kc-hover mt-3">
            <div class="text-slate-200 font-semibold mb-2">Redirect URIs</div>
            <div id="redirList" class="flex flex-wrap gap-2 mb-2"></div>
            <div class="flex gap-2">
                <input id="redirInput" class="kc-input rounded-xl px-3 py-2 text-sm w-full" placeholder="https://app.example.com/callback/*" />
                <button type="button" class="btn-subtle" id="btnAddRedirect">Add</button>
            </div>
            <div class="kc-th mt-2">Требуется, когда включён Standard flow.</div>
        </div>
    </div>

    <!-- ROLES -->
    <div class="tab-pane hidden" data-tab="Roles" role="tabpanel">
        <div class="kc-card p-5 kc-hover">
            <div class="text-slate-200 font-semibold mb-3">Local roles</div>
            <div id="locList" class="flex flex-wrap gap-2 mb-2"></div>
            <div class="flex gap-2">
                <input id="locInput" class="kc-input rounded-xl px-3 py-2 text-sm w-full md:w-72" placeholder="Например: app.read" />
                <button type="button" class="btn-subtle" id="btnAddLocal">Add</button>
            </div>
        </div>
    </div>

    <!-- SERVICE ROLES -->
    <div class="tab-pane hidden" data-tab="ServiceRoles" role="tabpanel">
        <div class="kc-card p-5 kc-hover">
            <div class="text-slate-200 font-semibold mb-3">Service roles</div>
            <div class="kc-th mb-2">Назначают роли других сервисов сервисному аккаунту текущего клиента.</div>

            <div id="svcList" class="flex flex-wrap gap-2 mb-2"></div>

            <div class="relative space-y-2">
                <div class="flex gap-2 items-center">
                    <input id="svcSearchInput"
                           class="kc-input kc-select-dark rounded-xl px-3 py-2 text-sm w-full md:w-[360px]"
                           placeholder="например: app-bank-portal или 'read'"
                           autocomplete="off" autocapitalize="off" spellcheck="false"/>
                    <button type="button" id="svcSearchBtn" class="btn-subtle">Найти</button>
                </div>

                <div id="svcSearchDd"
                     class="absolute z-20 mt-1 w-full md:w-[420px] kc-card p-2 hidden"></div>
            </div>

            <div id="svcChosen" class="hidden space-y-3">
                <div class="flex items-center gap-3">
                    <span class="kc-tag" id="svcChosenTag"></span>
                    <button type="button" class="btn-link underline text-slate-300" id="svcChange">Сменить сервис</button>
                </div>

                <div id="svcRoleList" class="grid md:grid-cols-2 gap-2"></div>
                <div><button type="button" id="btnMoreRoles" class="btn-subtle hidden">Показать ещё</button></div>

                <div id="svcErr" class="err"></div>
                <div class="kc-mini">Клик по роли добавляет её в список выше. Формат: <code>clientId: roleName</code>.</div>
            </div>
        </div>
    </div>

    @*<!-- SCOPES -->
    <div class="tab-pane hidden" data-tab="Scopes" role="tabpanel">
        <div class="kc-card p-5 kc-hover">
            <div class="text-slate-200 font-semibold mb-3">Default scopes</div>
            <div class="kc-th mb-2">Список скопов по умолчанию.</div>
            <div id="scopesList" class="flex flex-wrap gap-2"></div>
        </div>
    </div>*@

    <!-- FLOWS -->
    <div class="tab-pane hidden" data-tab="Flows" role="tabpanel">
        <div class="kc-card p-5 kc-hover">
            <div class="text-slate-200 font-semibold mb-3">Browser flow</div>
            <div class="kc-th mb-2">Назначение кастомного browser flow (заглушка).</div>
            <select id="flowSelect" class="kc-input kc-select rounded-xl px-3 py-2 text-sm w-full md:w-[360px]">
                <option>bank-browser-flow</option>
                <option>strict-browser-flow</option>
                <option>default-browser</option>
            </select>
        </div>
    </div>

    <!-- CREDENTIALS -->
    <div class="tab-pane hidden" data-tab="Credentials" role="tabpanel">
        <div class="kc-card p-5 kc-hover">
            <div class="text-slate-200 font-semibold mb-3">Credentials</div>
            <div class="grid md:grid-cols-2 md:gap-x-[9.375rem]">
                <div class="form-row_small justify-self-center w-full">
                    <label class="text-sm text-slate-400">Client ID</label>
                    <div class="flex gap-2 items-center">
                        <input id="credClientId" class="kc-input rounded-xl px-3 py-2 text-sm w-full" value="@clientId" readonly />
                        <button class="btn-subtle" id="btnCopyClientId" title="Копировать" aria-label="Копировать">
                            <!-- copy icon -->
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <rect x="9" y="9" width="13" height="13" rx="2" />
                                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" />
                            </svg>
                        </button>
                    </div>
                </div>

                <div class="form-row_small justify-self-center w-full">
                    <label class="text-sm text-slate-400">Secret key</label>
                    <div class="flex gap-2 items-center">
                        <input id="credSecret" class="kc-input rounded-xl px-3 py-2 text-sm w-full" value="••••••••••••••" />
                        <button class="btn-subtle" id="btnCopySecret" title="Копировать" aria-label="Копировать">
                            <!-- copy icon -->
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <rect x="9" y="9" width="13" height="13" rx="2" />
                                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" />
                            </svg>
                        </button>
                        <button class="btn-subtle" id="btnShowSecret" title="Показать" aria-label="Показать">
                            <!-- eye icon -->
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z" />
                                <circle cx="12" cy="12" r="3" />
                            </svg>
                        </button>
                        <button class="btn-danger" id="btnRegenSecret" title="Перегенерировать" aria-label="Перегенерировать">
                            <!-- refresh icon -->
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M21 12a9 9 0 1 1-3-6.7" />
                                <path d="M21 3v6h-6" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- ENDPOINTS -->
    @{
        var issuer = $"{baseUrl}/realms/{realm}";
        var auth = $"{issuer}/protocol/openid-connect/auth";
        var token = $"{issuer}/protocol/openid-connect/token";
        var user = $"{issuer}/protocol/openid-connect/userinfo";
        var jwks = $"{issuer}/protocol/openid-connect/certs";
        var logout = $"{issuer}/protocol/openid-connect/logout";
        var intros = $"{issuer}/protocol/openid-connect/token/introspect";
        var revoke = $"{issuer}/protocol/openid-connect/revoke";
        // опционально (если включено в KC):
        var device = $"{issuer}/protocol/openid-connect/auth/device";
        var reg = $"{issuer}/clients-registrations/openid-connect";
    }
    <div class="tab-pane hidden" data-tab="Endpoints" role="tabpanel">
        <div class="kc-card p-5 kc-hover" id="endpoints">
            <div class="text-slate-200 font-semibold mb-3">Endpoints</div>

            <div class="grid md:grid-cols-2 gap-3">
                <div class="form-row_small">
                    <label class="text-sm text-slate-400">Issuer</label>
                    <div class="flex gap-2 items-center">
                        <input class="kc-input rounded-xl px-3 py-2 text-sm w-full" id="ep-issuer" value="@issuer" readonly />
                        <button type="button" class="btn-subtle" data-copy="#ep-issuer" title="Copy" aria-label="Copy">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="9" y="9" width="13" height="13" rx="2" /><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" /></svg>
                        </button>
                    </div>
                </div>

                <div class="form-row_small">
                    <label class="text-sm text-slate-400">Authorization</label>
                    <div class="flex gap-2 items-center">
                        <input class="kc-input rounded-xl px-3 py-2 text-sm w-full" id="ep-auth" value="@auth" readonly />
                        <button type="button" class="btn-subtle" data-copy="#ep-auth" title="Copy" aria-label="Copy">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="9" y="9" width="13" height="13" rx="2" /><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" /></svg>
                        </button>
                    </div>
                </div>

                <div class="form-row_small">
                    <label class="text-sm text-slate-400">Token</label>
                    <div class="flex gap-2 items-center">
                        <input class="kc-input rounded-xl px-3 py-2 text-sm w-full" id="ep-token" value="@token" readonly />
                        <button type="button" class="btn-subtle" data-copy="#ep-token" title="Copy" aria-label="Copy">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="9" y="9" width="13" height="13" rx="2" /><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" /></svg>
                        </button>
                    </div>
                </div>

                <div class="form-row_small">
                    <label class="text-sm text-slate-400">UserInfo</label>
                    <div class="flex gap-2 items-center">
                        <input class="kc-input rounded-xl px-3 py-2 text-sm w-full" id="ep-user" value="@user" readonly />
                        <button type="button" class="btn-subtle" data-copy="#ep-user" title="Copy" aria-label="Copy">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="9" y="9" width="13" height="13" rx="2" /><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" /></svg>
                        </button>
                    </div>
                </div>

                <div class="form-row_small">
                    <label class="text-sm text-slate-400">JWKS</label>
                    <div class="flex gap-2 items-center">
                        <input class="kc-input rounded-xl px-3 py-2 text-sm w-full" id="ep-jwks" value="@jwks" readonly />
                        <button type="button" class="btn-subtle" data-copy="#ep-jwks" title="Copy" aria-label="Copy">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="9" y="9" width="13" height="13" rx="2" /><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" /></svg>
                        </button>
                    </div>
                </div>

                <div class="form-row_small">
                    <label class="text-sm text-slate-400">Logout</label>
                    <div class="flex gap-2 items-center">
                        <input class="kc-input rounded-xl px-3 py-2 text-sm w-full" id="ep-logout" value="@logout" readonly />
                        <button type="button" class="btn-subtle" data-copy="#ep-logout" title="Copy" aria-label="Copy">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="9" y="9" width="13" height="13" rx="2" /><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" /></svg>
                        </button>
                    </div>
                </div>

                <div class="form-row_small">
                    <label class="text-sm text-slate-400">Introspection</label>
                    <div class="flex gap-2 items-center">
                        <input class="kc-input rounded-xl px-3 py-2 text-sm w-full" id="ep-intros" value="@intros" readonly />
                        <button type="button" class="btn-subtle" data-copy="#ep-intros" title="Copy" aria-label="Copy">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="9" y="9" width="13" height="13" rx="2" /><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" /></svg>
                        </button>
                    </div>
                </div>

                <div class="form-row_small">
                    <label class="text-sm text-slate-400">Revocation</label>
                    <div class="flex gap-2 items-center">
                        <input class="kc-input rounded-xl px-3 py-2 text-sm w-full" id="ep-revoke" value="@revoke" readonly />
                        <button type="button" class="btn-subtle" data-copy="#ep-revoke" title="Copy" aria-label="Copy">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="9" y="9" width="13" height="13" rx="2" /><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" /></svg>
                        </button>
                    </div>
                </div>

                <div class="form-row_small">
                    <label class="text-sm text-slate-400">Device Auth</label>
                    <div class="flex gap-2 items-center">
                        <input class="kc-input rounded-xl px-3 py-2 text-sm w-full" id="ep-device" value="@device" readonly />
                        <button type="button" class="btn-subtle" data-copy="#ep-device" title="Copy" aria-label="Copy">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="9" y="9" width="13" height="13" rx="2" /><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" /></svg>
                        </button>
                    </div>
                </div>
            </div>

            <div class="kc-th mt-2">Endpoints сформированы на основе вашего <code>Keycloak BaseUrl</code> и <code>realm</code>.</div>
        </div>
    </div>

    <!-- EVENTS -->
    <div class="tab-pane hidden" data-tab="Events" role="tabpanel">
        <div class="kc-card p-5 kc-hover">
            <div class="flex items-center justify-between mb-3">
                <div class="text-slate-200 font-semibold">Events</div>
                <div class="text-xs text-slate-400">Created: @(DateTime.Now.AddDays(-5).ToString("g")) by admin</div>
            </div>

            <div class="grid md:grid-cols-5 gap-2 mb-10">
                <select id="evFilterType" class="kc-input kc-select rounded-xl px-3 py-2 text-sm">
                    <option value="">All types</option>
                </select>
                <input id="evFrom" type="date" class="kc-input rounded-xl px-3 py-2 text-sm" />
                <input id="evTo" type="date" class="kc-input rounded-xl px-3 py-2 text-sm" />
                <input id="evUser" placeholder="User" class="kc-input rounded-xl px-3 py-2 text-sm" />
                <input id="evIp" placeholder="IP адрес" class="kc-input rounded-xl px-3 py-2 text-sm" />
            </div>

            <div class="grid grid-cols-12 gap-2 kc-th px-1">
                <div class="col-span-3">Type</div>
                <div class="col-span-3">Date</div>
                <div class="col-span-3">User</div>
                <div class="col-span-3">IP адрес</div>
            </div>
            <div id="eventsRows" class="mt-1"></div>
            <div id="eventsPager"></div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const svcRoles = JSON.parse('@Html.Raw(Model.ServiceRolesJson)');
        (function(){
          // ---------- Вкладки ----------
          const btns  = document.querySelectorAll('.tab-btn');
          const panes = document.querySelectorAll('.tab-pane');

          function showTab(tab){
            panes.forEach(p => p.classList.toggle('hidden', p.dataset.tab !== tab));
            btns.forEach(b => {
              const active = (b.dataset.tab === tab);
              b.classList.toggle('active', active);
              b.setAttribute('aria-selected', active ? 'true' : 'false');
            });
            history.replaceState(null, '', '#tab=' + encodeURIComponent(tab));
            localStorage.setItem('kc.details.tab', tab);
            if (tab === 'Events' && !window.__eventsInited){ if (typeof window.initEvents==='function') window.initEvents(); window.__eventsInited=true; }
          }
          const m = location.hash.match(/tab=([^&]+)/);
          const start = m ? decodeURIComponent(m[1]) : (localStorage.getItem('kc.details.tab') || 'Overview');
          btns.forEach(b => b.addEventListener('click', ()=> showTab(b.dataset.tab)));
          showTab(start);

          // ---------- Состояние формы ----------
          const realm = '@realm';
          const clientId = '@clientId';
          const redirs   = JSON.parse('@Html.Raw(Model.RedirectUrisJson)');
          const locals   = JSON.parse('@Html.Raw(Model.LocalRolesJson)');
          @* const scopes   = JSON.parse('@Html.Raw(Model.DefaultScopesJson)'); *@

          // Redirect URIs
          const swStandard = document.getElementById('swStandard');
          const redirectPanel = document.getElementById('redirectPanel');
          const redirInput = document.getElementById('redirInput');
          const redirList  = document.getElementById('redirList');
          const btnAddRedirect = document.getElementById('btnAddRedirect');
          renderChips(redirList, redirs);

          function renderChips(el, arr){
            el.innerHTML = '';
            arr.forEach((v, idx)=>{
              const chip = document.createElement('span');
              chip.className = 'kc-chip';
              chip.innerHTML = `${v} <button type="button" title="Remove">×</button>`;
              chip.querySelector('button').addEventListener('click', ()=>{ arr.splice(idx,1); renderChips(el, arr); });
              el.appendChild(chip);
            });
          }
          function renderStaticChips(el, arr){
            el.innerHTML = '';
            arr.forEach(v =>{
              const chip = document.createElement('span');
              chip.className = 'kc-chip';
              chip.textContent = v;
              el.appendChild(chip);
            });
          }
          btnAddRedirect?.addEventListener('click', ()=>{
            const v = (redirInput.value||'').trim(); if(!v) return;
            redirs.push(v); redirInput.value=''; renderChips(redirList, redirs);
          });

          function updateRedirectDisabled(){
            const on = swStandard?.checked;
            redirectPanel.classList.toggle('kc-disabled', !on);
            [redirInput, btnAddRedirect].forEach(x => x && (x.disabled = !on));
            redirectPanel.querySelectorAll('button').forEach(b => b.disabled = !on);
          }
          swStandard?.addEventListener('change', updateRedirectDisabled);
          updateRedirectDisabled();

          // Local roles
          const locInput = document.getElementById('locInput');
          const locList  = document.getElementById('locList');
          renderChips(locList, locals);
          document.getElementById('btnAddLocal')?.addEventListener('click', ()=>{
            const v = (locInput.value||'').trim(); if(!v) return;
            locals.push(v); locInput.value=''; renderChips(locList, locals);
          });

          // Default scopes (disabled)
          // const scopesList = document.getElementById('scopesList');
          // renderStaticChips(scopesList, scopes);

          // Copy endpoints
          document.querySelectorAll('button[data-copy]')?.forEach(btn => {
            btn.addEventListener('click', async () => {
              const sel = btn.getAttribute('data-copy');
              const target = sel ? document.querySelector(sel) : null;
              const val = target?.value || target?.textContent || '';
              try { await navigator.clipboard.writeText(val); } catch {}
            });
          });

          // Copy credentials & manage secret
          document.getElementById('btnCopyClientId')?.addEventListener('click', async () => {
            const val = document.getElementById('credClientId')?.value || '';
            try { await navigator.clipboard.writeText(val); } catch {}
          });

          const secretMask = '••••••••••••••';
          let secretVisible = false;

          async function fetchSecret(method = 'GET') {
            const resp = await fetch(`/api/client-secret?realm=${encodeURIComponent(realm)}&clientId=${encodeURIComponent(clientId)}`, { method });
            if (resp.ok) {
              const data = await resp.json();
              const input = document.getElementById('credSecret');
              if (input) input.value = data.secret || '';
              return data.secret || '';
            }
            return '';
          }

          const btnShowSecret = document.getElementById('btnShowSecret');
          btnShowSecret?.addEventListener('click', async () => {
            const input = document.getElementById('credSecret');
            if (!input) return;
            if (secretVisible) {
              input.value = secretMask;
              secretVisible = false;
              btnShowSecret.title = 'Показать';
              btnShowSecret.setAttribute('aria-label','Показать');
            } else {
              await fetchSecret('GET');
              secretVisible = true;
              btnShowSecret.title = 'Скрыть';
              btnShowSecret.setAttribute('aria-label','Скрыть');
            }
          });

          document.getElementById('btnCopySecret')?.addEventListener('click', async () => {
            const secret = await fetchSecret('GET');
            secretVisible = true;
            btnShowSecret && (btnShowSecret.title = 'Скрыть', btnShowSecret.setAttribute('aria-label','Скрыть'));
            try { await navigator.clipboard.writeText(secret); } catch {}
          });

          document.getElementById('btnRegenSecret')?.addEventListener('click', () => {
            secretVisible = true;
            btnShowSecret && (btnShowSecret.title = 'Скрыть', btnShowSecret.setAttribute('aria-label','Скрыть'));
            fetchSecret('POST');
          });

          // ---------- Events (ленивая инициализация) ----------
          window.initEvents = function(){
            const pageSize = 10;
            const TYPES = ["CLIENT_CREATED","CLIENT_UPDATED","ROLE_ADDED","ROLE_REMOVED","SCOPE_ASSIGNED","LOGIN","LOGOUT","TOKEN_EXCHANGED"];
            const USERS = ["alice","bob","charlie","svc-deploy","svc-ci","admin"];
            const rowsEl  = document.getElementById('eventsRows');
            const pagerEl = document.getElementById('eventsPager');
            const selType = document.getElementById('evFilterType');
            const inFrom  = document.getElementById('evFrom');
            const inTo    = document.getElementById('evTo');
            const inUser  = document.getElementById('evUser');
            const inIp    = document.getElementById('evIp');

            const rand = n => Math.floor(Math.random()*n);
            function gen(n=40){
              const now = Date.now(), arr=[];
              for (let i=0;i<n;i++){
                const minsBack = rand(60*24*7);
                const at = new Date(now - minsBack*60000);
                const ip = `10.${rand(255)}.${rand(255)}.${1+rand(254)}`;
                arr.push({ type:TYPES[rand(TYPES.length)], at, user:USERS[rand(USERS.length)], ip });
              }
              return arr.sort((a,b)=> b.at - a.at);
            }
            const all = gen(40);
            Array.from(new Set(all.map(e=>e.type))).forEach(t=> selType.add(new Option(t,t)));

            let page = 1;
            const fmt = d => d.toLocaleString();

            function applyFilters(data){
              const t  = selType.value;
              const uf = (inUser.value||'').trim().toLowerCase();
              const ip = (inIp.value||'').trim();
              const df = inFrom.value ? new Date(inFrom.value) : null;
              const dt = inTo.value   ? new Date(inTo.value)   : null;

              return data.filter(e=>{
                if (t && e.type !== t) return false;
                if (uf && !e.user.toLowerCase().includes(uf)) return false;
                if (ip && !e.ip.includes(ip)) return false;
                if (df && e.at < df) return false;
                if (dt && e.at > new Date(dt.getTime() + 24*3600*1000 - 1)) return false;
                return true;
              });
            }

            function render(){
              const data = applyFilters(all);
              const totalPages = Math.max(1, Math.ceil(data.length / pageSize));
              if (page > totalPages) page = totalPages;

              rowsEl.innerHTML = '';
              const slice = data.slice((page-1)*pageSize, page*pageSize);
              slice.forEach(e=>{
                rowsEl.insertAdjacentHTML('beforeend', `
                  <div class="grid grid-cols-12 gap-2 text-sm py-2 border-b border-white/5 px-1">
                    <div class="col-span-3 text-slate-200">${e.type}</div>
                    <div class="col-span-3 text-slate-300">${fmt(e.at)}</div>
                    <div class="col-span-3 text-slate-300">${e.user}</div>
                    <div class="col-span-3 text-slate-400">${e.ip}</div>
                  </div>
                `);
              });

              pagerEl.innerHTML = '';
              if (totalPages > 1){
                const mk = (label,target,disabled=false,active=false)=>
                  `<a class="rounded-lg px-3 py-1 text-sm border border-white/10 ${active?'bg-white/10 text-white':(disabled?'pointer-events-none opacity-50':'bg-white/5 hover:bg-white/10')}"
                      href="#tab=Events" data-page="${target}">${label}</a>`;
                const inner = [
                  mk('Prev', Math.max(1,page-1), page===1),
                  ...Array.from({length: totalPages}, (_,i)=> mk(String(i+1), i+1, false, i+1===page)),
                  mk('Next', Math.min(totalPages,page+1), page===totalPages)
                ].join('');
                pagerEl.insertAdjacentHTML('beforeend', `<div class="flex items-center justify-center gap-1 mt-4">${inner}</div>`);
                pagerEl.querySelectorAll('a[data-page]').forEach(a => a.addEventListener('click', (ev)=>{ ev.preventDefault(); page = parseInt(a.dataset.page,10); render(); }));
              }
            }

            [selType, inFrom, inTo, inUser, inIp].forEach(el=>{
              el?.addEventListener('input', ()=>{ page=1; render(); });
              el?.addEventListener('change', ()=>{ page=1; render(); });
            });

            render();
          };

          // ---------- Сбор данных перед Save ----------
          const saveForm = document.getElementById('saveForm');
          function collect()
          {
            // базовые
            document.getElementById('hidClientId').value       = (document.getElementById('ovClientId').value||'').trim();
            document.getElementById('hidDescription').value    = (document.getElementById('ovDesc').value||'').trim();
            document.getElementById('hidClientAuth').value     = document.getElementById('swClientAuth').checked ? 'true' : 'false';
            document.getElementById('hidStandardFlow').value   = document.getElementById('swStandard').checked ? 'true' : 'false';
            document.getElementById('hidServiceAccount').value = document.getElementById('swService').checked ? 'true' : 'false';
            // массивы
            document.getElementById('hidRedirects').value    = JSON.stringify(redirs);
            document.getElementById('hidLocalRoles').value   = JSON.stringify(locals);
            document.getElementById('hidServiceRoles').value = JSON.stringify(svcRoles);
          }
            saveForm?.addEventListener('submit', collect);
        })();
        (function(){
          const $  = (s, r=document)=>r.querySelector(s);
          const el = (t, cls, html)=>{ const n=document.createElement(t); if(cls) n.className=cls; if(html!=null) n.innerHTML=html; return n; };
          const safe = fn => (...a)=>{ try { return fn(...a); } catch(e){ console.error('[ServiceRolesUI]', e); } };

          const hidRoles       = document.getElementById('hidServiceRoles');
          const svcList        = $('#svcList');
          const svcSearchInput = $('#svcSearchInput');
          const svcSearchBtn   = $('#svcSearchBtn');
          const svcSearchDd    = $('#svcSearchDd');

          const svcChosen      = $('#svcChosen');
          const svcChosenTag   = $('#svcChosenTag');
          const svcChangeBtn   = $('#svcChange');

          const svcRoleList    = $('#svcRoleList');
          const btnMoreRoles   = $('#btnMoreRoles');
          const svcErr         = $('#svcErr');

          const PAGE_URL = '@Url.Page(null)';
          const realm = '@realm';
          const MIN_LEN = 3;

          const state = {
            chips: Array.isArray(svcRoles) ? svcRoles : [],
            currentClient: null,
            page: 0, size: 50, more: false,
            cacheClients: new Map(),
            cacheClientRoles: new Map(),
            lastQuery: '',
            roleScanCursor: 0,
            roleScanHasMore: false,
            pendingEmpty: false
          };

          function persist(){ if(hidRoles) hidRoles.value = JSON.stringify(state.chips); }

          function renderChips(){
            if(!svcList) return;
            svcList.innerHTML = '';
            for (const s of state.chips){
              const chip = el('div','kc-chip'); chip.textContent = s;
              const x = el('button','kc-chip-x','×'); x.type='button'; x.title='Удалить';
              x.addEventListener('click', safe(()=>{
                const i = state.chips.indexOf(s);
                if(i>=0){ state.chips.splice(i,1); renderChips(); persist(); }
              }));
              chip.appendChild(x);
              svcList.appendChild(chip);
            }
          }
          renderChips(); persist();

          async function fetchJson(url, opts){
            const r = await fetch(url, {headers:{'Accept':'application/json'}, ...opts});
            if(!r.ok) throw new Error(`HTTP ${r.status}`);
            return r.json();
          }
          function hideDd(){ if(!svcSearchDd) return; svcSearchDd.classList.add('hidden'); svcSearchDd.innerHTML=''; svcSearchDd.style.minHeight=''; }
          function showDd(){ if(!svcSearchDd) return; svcSearchDd.classList.remove('hidden'); }
          function showLoading(){
            if (!svcSearchDd) return;
            svcSearchDd.innerHTML = `<div class="px-3 py-2 text-slate-400">Ищем...</div>`;
            svcSearchDd.style.minHeight = '56px';
            showDd();
          }

          async function searchClients(q){
            if (state.cacheClients.has(q)) return state.cacheClients.get(q);
            const url = `${PAGE_URL}?handler=ClientsSearch&realm=${encodeURIComponent(realm)}&q=${encodeURIComponent(q)}&first=0&max=12`;
            const clients = await fetchJson(url);
            state.cacheClients.set(q, clients || []);
            return clients || [];
          }

          async function searchRolesAcrossClients(q, append=false, isFirst=false){
            const url = `${PAGE_URL}?handler=RoleLookup&realm=${encodeURIComponent(realm)}&q=${encodeURIComponent(q)}&clientFirst=${state.roleScanCursor}&clientsToScan=25&rolesPerClient=10`;
            const res = await fetchJson(url);
            const hits = res.hits || [];
            renderRoleHits(hits, append);
            if (typeof res.nextClientFirst === 'number' && res.nextClientFirst >= 0){
              state.roleScanCursor = res.nextClientFirst;
              state.roleScanHasMore = true;
              ensureMoreHitsButton();
            } else {
              state.roleScanHasMore = false;
              removeMoreHitsButton();
            }
            if (isFirst){
              if (state.pendingEmpty && hits.length === 0){
                svcSearchDd.innerHTML = `<div class="px-2 py-1 text-slate-400">Совпадений не найдено</div>`;
                showDd();
              }
              state.pendingEmpty = false;
            }
          }

          function ensureMoreHitsButton(){
            if (!svcSearchDd) return;
            if (svcSearchDd.querySelector('#roleHitsMoreBtn')) return;
            const btn = el('button','w-full text-center px-3 py-2 mt-2 hover:bg-slate-700 rounded-md','Показать ещё совпадения');
            btn.type='button';
            btn.id='roleHitsMoreBtn';
            btn.addEventListener('click', safe(()=> searchRolesAcrossClients(state.lastQuery, true, false)));
            svcSearchDd.appendChild(btn);
          }
          function removeMoreHitsButton(){
            document.getElementById('roleHitsMoreBtn')?.remove();
          }

          function renderRoleHits(hits, append){
            if (!svcSearchDd || !hits.length) return;
            let roleSec = svcSearchDd.querySelector('#roleHitsSection');
            if (!append){
              roleSec?.remove();
              roleSec = el('div', null, '');
              roleSec.id = 'roleHitsSection';
              roleSec.appendChild(el('div','kc-mini text-slate-400 px-2 pb-1','Роли (совпадения)'));
              svcSearchDd.appendChild(roleSec);
            }
            hits.forEach(it=>{
              const line = el('button','w-full text-left px-3 py-2 hover:bg-slate-700 rounded-md');
              line.type='button';
              line.textContent = `${it.clientId}: ${it.role}`;
              line.addEventListener('click', safe(()=>{
                const val = `${it.clientId}: ${it.role}`;
                if (!state.chips.includes(val)){ state.chips.push(val); renderChips(); persist(); }
              }));
              roleSec.appendChild(line);
            });
          }

          function renderClientList(clients){
            if (!svcSearchDd) return;
            if (!clients.length){ svcSearchDd.innerHTML = `<div class="px-2 py-1 text-slate-400">Совпадений не найдено</div>`; showDd(); return; }
            const wrap = el('div', null, '');
            clients.forEach(it=>{
              const line = el('button','w-full text-left px-3 py-2 hover:bg-slate-700 rounded-md');
              line.type='button';
              line.textContent = it.clientId;
              line.addEventListener('click', safe(()=> selectClient(it)));
              wrap.appendChild(line);
            });
            svcSearchDd.innerHTML = '';
            svcSearchDd.appendChild(wrap);
            svcSearchDd.appendChild(el('div','divider my-2',''));
            showDd();
          }

          async function unifiedSearch(qRaw){
            const q = (qRaw||'').trim();
            if (q.length < MIN_LEN){
              svcSearchDd.innerHTML = `<div class="px-2 py-1 text-slate-400">Введите минимум ${MIN_LEN} символа</div>`;
              showDd();
              return;
            }
            state.lastQuery = q;
            state.roleScanCursor = 0;
            state.roleScanHasMore = false;
            state.pendingEmpty = true;
            removeMoreHitsButton();
            showLoading();
            const clients = await searchClients(q);
            if (clients.length){
              renderClientList(clients);
              state.pendingEmpty = false;
            }
            searchRolesAcrossClients(q, false, true).catch(()=>{});
          }

          function selectClient(it){
            state.currentClient = { id: it.id, clientId: it.clientId };
            if (svcChosenTag) svcChosenTag.textContent = it.clientId;
            svcChosen?.classList.remove('hidden');
            hideDd();
            if (svcSearchInput) svcSearchInput.value = it.clientId;
            state.page = 0;
            svcRoleList && (svcRoleList.innerHTML = '');
            loadRoles({append:false});
          }
          svcChangeBtn?.addEventListener('click', safe(()=>{
            state.currentClient = null;
            svcChosen?.classList.add('hidden');
            svcSearchInput?.focus();
          }));

          async function loadRoles({append}){
            if (svcErr){ svcErr.classList.remove('show'); svcErr.textContent=''; }
            if (!state.currentClient) return;

            const key = `${state.currentClient.clientId}|${state.page}`;
            try{
              let roles = state.cacheClientRoles.get(key);
              if (!roles){
                const url = `${PAGE_URL}?handler=ClientRoles&id=${encodeURIComponent(state.currentClient.id)}&realm=${encodeURIComponent(realm)}&first=${state.page*state.size}&max=${state.size}`;
                roles = await fetchJson(url);
                state.cacheClientRoles.set(key, roles || []);
              }
              renderRoles(roles || [], {append});
              state.more = (roles?.length || 0) === state.size;
              btnMoreRoles?.classList.toggle('hidden', !state.more);
            }catch(e){
              if (svcErr){ svcErr.textContent = `Не удалось загрузить роли: ${e.message}`; svcErr.classList.add('show'); }
            }
          }
          function renderRoles(roles, {append}){
            if (!svcRoleList) return;
            if (!append) svcRoleList.innerHTML = '';
            if (!roles.length){
              if (!append) svcRoleList.innerHTML = `<div class="px-2 py-1 text-slate-400">Ролей не найдено</div>`;
              return;
            }
            roles.forEach(name=>{
              const item = el('button','kc-card px-3 py-2 hover:bg-slate-700 text-left');
              item.type = 'button';
              item.textContent = name;
              item.title = 'Добавить роль';
              item.addEventListener('click', safe(()=>{
                if (!state.currentClient) return;
                const val = `${state.currentClient.clientId}: ${name}`;
                if (!state.chips.includes(val)){ state.chips.push(val); renderChips(); persist(); }
              }));
              svcRoleList.appendChild(item);
            });
          }
          btnMoreRoles?.addEventListener('click', safe(()=>{
            state.page += 1;
            loadRoles({append:true});
          }));

          const updateBtnState = ()=> { if (svcSearchBtn && svcSearchInput) svcSearchBtn.disabled = (svcSearchInput.value.trim().length < MIN_LEN); };
          updateBtnState();
          svcSearchInput?.addEventListener('input', updateBtnState);

          svcSearchBtn?.addEventListener('click', safe(()=>{
            const q = svcSearchInput?.value || '';
            showLoading();
            requestAnimationFrame(()=> unifiedSearch(q));
          }));

          svcSearchInput?.addEventListener('keydown', e => { if (e.key === 'Enter') e.preventDefault(); });
          document.addEventListener('click', safe((e)=>{
            if (!svcSearchDd) return;
            if (!svcSearchDd.contains(e.target) && e.target !== svcSearchInput && e.target !== svcSearchBtn) hideDd();
          }));
        })();
      </script>
  }
