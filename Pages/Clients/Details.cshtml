@page
@model Assistant.Pages.Clients.DetailsModel
@inject IConfiguration Config
@{ 
    ViewData["Title"] = "Client details";
    var client = Model.Client;
    string clientId = client.ClientId;
    string realm = client.Realm;
    bool enabled = client.Enabled;
    bool clientAuthInit = client.ClientAuth;
    bool standardInit = client.StandardFlow;
    bool serviceInit = client.ServiceAccount;
    string description = client.Description ?? "";
    string baseUrl = Config["Keycloak:BaseUrl"]!.TrimEnd('/');
    bool canManageClient = User.IsInRole("assistant-admin");
}


@{
    Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> detailsHeaderLead = @<div class="flex items-center">
        <a href="@Model.BackUrl" class="text-slate-400 text-sm hover:text-slate-200">&larr; Back to Clients</a>
        <div class="ml-auto text-slate-400 text-sm">Realm: <span class="text-slate-200">@realm</span></div>
    </div>;
    Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> detailsHeaderRight = @<text>
        <span class="text-md text-slate-200">Status</span>
        <label class="kc-switch inline-flex items-center">
            <input type="checkbox" id="swEnabled" @(enabled ? "checked" : "") />
            <span class="track"><span class="dot"></span></span>
        </label>
        <span id="lblEnabled"
              class="inline-flex items-center rounded-full px-2 py-1 text-xs border border-white/10 @(enabled ? "bg-emerald-500/20 text-emerald-200" : "bg-rose-500/20 text-rose-200")">
            @((enabled) ? "Enabled" : "Disabled")
        </span>
    </text>;
}
@await Html.PartialAsync("_AuroraHeader", new AuroraHeaderModel
{
    Title = clientId,
    HeadingTag = "h1",
    ThemeClass = "aurora-green-indigo",
    ContentClasses = "relative flex flex-col gap-3 md:flex-row md:items-center md:justify-between",
    TitleCssClass = "text-3xl md:text-4xl text-white tracking-tight drop-shadow-[0_6px_18px_rgba(99,102,241,0.25)]",
    LeadContent = detailsHeaderLead,
    RightContent = detailsHeaderRight,
    RightContainerClasses = "flex items-center gap-2"
})

<!-- Вкладки -->
<div class="flex flex-wrap gap-2 mb-4" role="tablist" aria-label="Client tabs">
    <button type="button" class="tab-btn active" data-tab="Overview" role="tab" aria-selected="true">Общие настройки</button>
    <button type="button" class="tab-btn" data-tab="Roles" role="tab">Локальные роли</button>
    <button type="button" class="tab-btn" data-tab="ServiceRoles" role="tab">Сервисные роли</button>
    @*<button type="button" class="tab-btn" data-tab="Scopes" role="tab">Scopes</button>*@
    @*<button type="button" class="tab-btn" data-tab="Flows" role="tab">Flows</button>*@
    <button type="button" class="tab-btn" data-tab="Credentials" role="tab">Учетные данные клиента</button>
    <button type="button" class="tab-btn" data-tab="Token" role="tab">Токен</button>
    <button type="button" class="tab-btn" data-tab="Endpoints" role="tab">URIs для запросов</button>
    <button type="button" class="tab-btn" data-tab="Events" role="tab">События по клиенту</button>


    <div class="ml-auto flex items-center gap-2">
        <button type="submit"
                class="btn-danger @(canManageClient ? string.Empty : "kc-disabled opacity-60 cursor-not-allowed")"
                id="btnDelete"
                form="deleteForm"
                title="@(canManageClient ? "Удалить клиента" : "Удаление доступно только администраторам")"
                aria-label="Delete"
                disabled="@(canManageClient ? null : "disabled")"
                aria-disabled="@(canManageClient ? "false" : "true")">
            <!-- trash icon -->
            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="3 6 5 6 21 6" />
                <path d="M19 6l-1 14a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2L5 6" />
                <path d="M10 11v6" />
                <path d="M14 11v6" />
                <path d="M9 6V4a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v2" />
            </svg>
        </button>
        <button type="submit"
                class="btn-primary @(canManageClient ? string.Empty : "kc-disabled opacity-60 cursor-not-allowed")"
                id="btnSave"
                form="saveForm"
                title="@(canManageClient ? "Сохранить изменения" : "Редактирование доступно только администраторам")"
                aria-label="Save"
                disabled="@(canManageClient ? null : "disabled")"
                aria-disabled="@(canManageClient ? "false" : "true")">
            <!-- floppy/save icon -->
            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M17 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V7z" />
                <path d="M17 3v4H7V3" />
                <path d="M7 13h10v8H7z" />
            </svg>
        </button>
    </div>
</div>

<!-- Контент вкладок -->
<div class="space-y-4">
    <!-- OVERVIEW -->
    <div class="tab-pane" data-tab="Overview" role="tabpanel">
        <div class="kc-card p-5 kc-hover">
            <div class="grid md:grid-cols-2 md:gap-x-[9.375rem]">
                <div class="space-y-3 justify-self-center w-full">
                    <div class="form-row_small">
                        <label class="text-sm text-slate-400">Client ID</label>
                        <input id="ovClientId" class="kc-input rounded-xl px-3 py-2 text-sm" value="@clientId" />
                    </div>
                    <div class="form-row_small">
                        <label class="text-sm text-slate-400">Описание клиента</label>
                        <input id="ovDesc" class="kc-input rounded-xl px-3 py-2 text-sm" value="@description" placeholder="Опишите вашего клиента..." />
                    </div>
                </div>

                <div class="space-y-3 justify-self-center w-full">
                    <div class="form-row">
                        <label class="text-sm text-slate-400">Тип клиента (с ключом/без)</label>
                        <label class="kc-switch inline-flex items-center">
                            <input type="checkbox" id="swClientAuth" @(clientAuthInit ? "checked" : "")>
                            <span class="track"><span class="dot"></span></span>
                        </label>
                    </div>
                    <div class="form-row">
                        <label class="text-sm text-slate-400">Стандартный поток</label>
                        <label class="kc-switch inline-flex items-center">
                            <input type="checkbox" id="swStandard" @(standardInit ? "checked" : "")>
                            <span class="track"><span class="dot"></span></span>
                        </label>
                    </div>
                    <div class="form-row">
                        <label class="text-sm text-slate-400">Межсервисное взаимодействие</label>
                        <label class="kc-switch inline-flex items-center">
                            <input type="checkbox" id="swService" @(serviceInit ? "checked" : "")>
                            <span class="track"><span class="dot"></span></span>
                        </label>
                    </div>
                </div>
            </div>
        </div>

        <!-- Redirect URIs — дизейблится при Standard=false -->
        <div id="redirectPanel" class="kc-card p-5 kc-hover mt-3">
            <div class="text-slate-200 font-semibold mb-2">Адреса для перенаправлений</div>
            <div id="redirList" class="flex flex-wrap gap-2 mb-2"></div>
            <div class="flex gap-2">
                <input id="redirInput" class="kc-input rounded-xl px-3 py-2 text-sm w-full" placeholder="https://app.example.com/callback/*" />
                <button type="button" class="btn-subtle" id="btnAddRedirect">Добавить</button>
            </div>
            <div class="kc-th mt-2">Требуется, когда включён Standard flow.</div>
        </div>
    </div>

    <!-- ROLES -->
    <div class="tab-pane hidden" data-tab="Roles" role="tabpanel">
        <div class="kc-card p-5 kc-hover">
            <div class="text-slate-200 font-semibold mb-3">Локальные роли</div>
            <div id="locList" class="flex flex-wrap gap-2 mb-2"></div>
            <div class="flex gap-2 mb-2 items-center">
                <div class="prefix-wrap w-full md:w-[360px]">
                    <span class="prefix-chip">kc-gf-</span>
                    <input id="locInput" class="prefix-input text-sm" placeholder="Например: app.read" />
                </div>
                <button type="button" class="btn-subtle" id="btnAddLocal">Добавить</button>
            </div>
            <div class="kc-th mb-2">Создаются роли текущего клиента для назначения другим.</div>
        </div>
    </div>

    <!-- SERVICE ROLES -->
    <div class="tab-pane hidden" data-tab="ServiceRoles" role="tabpanel">
        <div class="kc-card p-5 kc-hover">
            <div class="text-slate-200 font-semibold mb-3">Сервисные роли</div>

            <div id="svcList" class="flex flex-wrap gap-2 mb-2"></div>

            <div class="relative space-y-2">
                <div class="flex gap-2 items-center">
                    <input id="svcSearchInput" class="kc-input rounded-xl px-3 py-2 text-sm w-full md:w-[360px]" placeholder="Например: app-bank-portal или 'read'" autocomplete="off" autocapitalize="off" spellcheck="false"/>
                    <button type="button" id="svcSearchBtn" class="btn-subtle">Найти</button>
                </div>

                <div id="svcSearchDd"
                     class="absolute z-20 mt-1 w-full md:w-[420px] kc-card p-2 hidden"></div>
                <div class="kc-th mb-2">Назначаются роли других клиентов для текущего.</div>
            </div>

            <div id="svcChosen" class="hidden space-y-3">
                <div class="flex items-center gap-3">
                    <span class="kc-tag" id="svcChosenTag"></span>
                    <button type="button" class="btn-link underline text-slate-300" id="svcChange">Сменить сервис</button>
                </div>

                <div id="svcRoleList" class="grid md:grid-cols-2 gap-2"></div>
                <div><button type="button" id="btnMoreRoles" class="btn-subtle hidden">Показать ещё</button></div>

                <div id="svcErr" class="err"></div>
                <div class="kc-mini">Клик по роли добавляет её в список выше. Формат: <code>clientId: roleName</code>.</div>
            </div>
        </div>
    </div>

    @*<!-- SCOPES -->
    <div class="tab-pane hidden" data-tab="Scopes" role="tabpanel">
        <div class="kc-card p-5 kc-hover">
            <div class="text-slate-200 font-semibold mb-3">Default scopes</div>
            <div class="kc-th mb-2">Список скопов по умолчанию.</div>
            <div id="scopesList" class="flex flex-wrap gap-2"></div>
        </div>
    </div>*@

    @*<!-- FLOWS -->
    <div class="tab-pane hidden" data-tab="Flows" role="tabpanel">
        <div class="kc-card p-5 kc-hover">
            <div class="text-slate-200 font-semibold mb-3">Browser flow</div>
            <div class="kc-th mb-2">Назначение кастомного browser flow (заглушка).</div>
            <select id="flowSelect" class="kc-input kc-select rounded-xl px-3 py-2 text-sm w-full md:w-[360px]">
                <option>bank-browser-flow</option>
                <option>strict-browser-flow</option>
                <option>default-browser</option>
            </select>
        </div>
    </div>*@

    <!-- CREDENTIALS -->
    <div class="tab-pane hidden" data-tab="Credentials" role="tabpanel">
        <div class="kc-card p-5 kc-hover">
            <div class="text-slate-200 font-semibold mb-3">Credentials</div>
            <div class="grid md:grid-cols-2 md:gap-x-[5rem]">
                <div class="form-row_small justify-self-center w-full">
                    <label class="text-sm text-slate-400">Client ID</label>
                    <div class="flex gap-2 items-center">
                        <input id="credClientId" class="kc-input rounded-xl px-3 py-2 text-sm w-full" value="@clientId" readonly />
                        <button class="btn-subtle" id="btnCopyClientId" title="Копировать" aria-label="Копировать">
                            <!-- copy icon -->
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <rect x="9" y="9" width="13" height="13" rx="2" />
                                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" />
                            </svg>
                        </button>
                    </div>
                </div>

                <div class="form-row_small justify-self-center w-full">
                    <label class="text-sm text-slate-400">Секретный ключ</label>
                    <div class="flex gap-2 items-center">
                        <input id="credSecret"
                               class="kc-input rounded-xl px-3 py-2 text-sm w-full"
                               value="••••••••••••••"
                               readonly
                               aria-readonly="true" />
                        <button class="btn-subtle @(canManageClient ? string.Empty : "kc-disabled opacity-60 cursor-not-allowed")"
                                id="btnCopySecret"
                                title="Копировать"
                                aria-label="Копировать"
                                disabled="@(canManageClient ? null : "disabled")"
                                aria-disabled="@(canManageClient ? "false" : "true")">
                            <!-- copy icon -->
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <rect x="9" y="9" width="13" height="13" rx="2" />
                                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" />
                            </svg>
                        </button>
                        <button class="btn-subtle @(canManageClient ? string.Empty : "kc-disabled opacity-60 cursor-not-allowed")"
                                id="btnShowSecret"
                                title="Показать"
                                aria-label="Показать"
                                disabled="@(canManageClient ? null : "disabled")"
                                aria-disabled="@(canManageClient ? "false" : "true")">
                            <!-- eye icon -->
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z" />
                                <circle cx="12" cy="12" r="3" />
                            </svg>
                        </button>
                        <button class="btn-danger @(canManageClient ? string.Empty : "kc-disabled opacity-60 cursor-not-allowed")"
                                id="btnRegenSecret"
                                title="Перегенерировать"
                                aria-label="Перегенерировать"
                                disabled="@(canManageClient ? null : "disabled")"
                                aria-disabled="@(canManageClient ? "false" : "true")">
                            <!-- refresh icon -->
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M21 12a9 9 0 1 1-3-6.7" />
                                <path d="M21 3v6h-6" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- TOKEN -->
    <div class="tab-pane hidden" data-tab="Token" role="tabpanel">
        <div class="kc-card p-5 kc-hover space-y-5">
            <div class="space-y-2 max-w-xl">
                <label class="text-sm text-slate-400" for="tokenUsername">Username пользователя</label>
                <input id="tokenUsername" class="kc-input rounded-xl px-3 py-2 text-sm w-full" placeholder="user.name" autocomplete="off" autocapitalize="off" spellcheck="false" />
                <div id="tokenError" class="err"></div>
                <div class="kc-mini text-slate-400">Укажите пользователя, от имени которого нужно получить пример токена.</div>
            </div>

            <div>
                <div class="text-slate-200 font-semibold mb-2">Тип токена</div>
                <div class="flex flex-wrap gap-4 text-sm text-slate-200">
                    <label class="inline-flex items-center gap-2">
                        <input type="radio" name="tokenType" value="AccessToken" checked>
                        <span>Access Token</span>
                    </label>
                    <label class="inline-flex items-center gap-2">
                        <input type="radio" name="tokenType" value="IdToken">
                        <span>ID Token</span>
                    </label>
                    <label class="inline-flex items-center gap-2">
                        <input type="radio" name="tokenType" value="UserInfo">
                        <span>User Info</span>
                    </label>
                </div>
            </div>

            <div class="flex flex-wrap items-center gap-3">
                <button type="button" class="btn-primary" id="btnGenerateToken">Сгенерировать payload</button>
                <div id="tokenStatus" class="kc-mini text-slate-400"></div>
            </div>
            <div id="tokenMeta" class="kc-mini text-slate-300"></div>

            <div>
                <div class="text-sm text-slate-400 mb-1">Payload примера</div>
                <pre id="tokenPayload" class="rounded-xl bg-slate-900/60 text-slate-100 text-xs p-4 overflow-auto max-h-96 whitespace-pre-wrap break-words">Тут появится payload токена.</pre>
                <div class="kc-mini text-slate-500 mt-2">Выводится payload примерного токена. Реальный токен не генерируется.</div>
            </div>
        </div>
    </div>

    <!-- ENDPOINTS -->
    @{
        var issuer = $"{baseUrl}/realms/{realm}";
        var auth = $"{issuer}/protocol/openid-connect/auth";
        var token = $"{issuer}/protocol/openid-connect/token";
        var user = $"{issuer}/protocol/openid-connect/userinfo";
        var jwks = $"{issuer}/protocol/openid-connect/certs";
        var logout = $"{issuer}/protocol/openid-connect/logout";
        var intros = $"{issuer}/protocol/openid-connect/token/introspect";
        var revoke = $"{issuer}/protocol/openid-connect/revoke";
        // опционально (если включено в KC):
        var device = $"{issuer}/protocol/openid-connect/auth/device";
        var reg = $"{issuer}/clients-registrations/openid-connect";
    }
    <div class="tab-pane hidden" data-tab="Endpoints" role="tabpanel">
        <div class="kc-card p-5 kc-hover" id="endpoints">
            <div class="text-slate-200 font-semibold mb-3">Endpoints</div>

            <div class="grid md:grid-cols-2 gap-3">
                <div class="form-row_small">
                    <label class="text-sm text-slate-400">Issuer</label>
                    <div class="flex gap-2 items-center">
                        <input class="kc-input rounded-xl px-3 py-2 text-sm w-full" id="ep-issuer" value="@issuer" readonly />
                        <button type="button" class="btn-subtle" data-copy="#ep-issuer" title="Copy" aria-label="Copy">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="9" y="9" width="13" height="13" rx="2" /><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" /></svg>
                        </button>
                    </div>
                </div>

                <div class="form-row_small">
                    <label class="text-sm text-slate-400">Authorization</label>
                    <div class="flex gap-2 items-center">
                        <input class="kc-input rounded-xl px-3 py-2 text-sm w-full" id="ep-auth" value="@auth" readonly />
                        <button type="button" class="btn-subtle" data-copy="#ep-auth" title="Copy" aria-label="Copy">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="9" y="9" width="13" height="13" rx="2" /><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" /></svg>
                        </button>
                    </div>
                </div>

                <div class="form-row_small">
                    <label class="text-sm text-slate-400">Token</label>
                    <div class="flex gap-2 items-center">
                        <input class="kc-input rounded-xl px-3 py-2 text-sm w-full" id="ep-token" value="@token" readonly />
                        <button type="button" class="btn-subtle" data-copy="#ep-token" title="Copy" aria-label="Copy">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="9" y="9" width="13" height="13" rx="2" /><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" /></svg>
                        </button>
                    </div>
                </div>

                <div class="form-row_small">
                    <label class="text-sm text-slate-400">UserInfo</label>
                    <div class="flex gap-2 items-center">
                        <input class="kc-input rounded-xl px-3 py-2 text-sm w-full" id="ep-user" value="@user" readonly />
                        <button type="button" class="btn-subtle" data-copy="#ep-user" title="Copy" aria-label="Copy">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="9" y="9" width="13" height="13" rx="2" /><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" /></svg>
                        </button>
                    </div>
                </div>

                <div class="form-row_small">
                    <label class="text-sm text-slate-400">JWKS</label>
                    <div class="flex gap-2 items-center">
                        <input class="kc-input rounded-xl px-3 py-2 text-sm w-full" id="ep-jwks" value="@jwks" readonly />
                        <button type="button" class="btn-subtle" data-copy="#ep-jwks" title="Copy" aria-label="Copy">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="9" y="9" width="13" height="13" rx="2" /><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" /></svg>
                        </button>
                    </div>
                </div>

                <div class="form-row_small">
                    <label class="text-sm text-slate-400">Logout</label>
                    <div class="flex gap-2 items-center">
                        <input class="kc-input rounded-xl px-3 py-2 text-sm w-full" id="ep-logout" value="@logout" readonly />
                        <button type="button" class="btn-subtle" data-copy="#ep-logout" title="Copy" aria-label="Copy">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="9" y="9" width="13" height="13" rx="2" /><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" /></svg>
                        </button>
                    </div>
                </div>

                <div class="form-row_small">
                    <label class="text-sm text-slate-400">Introspection</label>
                    <div class="flex gap-2 items-center">
                        <input class="kc-input rounded-xl px-3 py-2 text-sm w-full" id="ep-intros" value="@intros" readonly />
                        <button type="button" class="btn-subtle" data-copy="#ep-intros" title="Copy" aria-label="Copy">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="9" y="9" width="13" height="13" rx="2" /><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" /></svg>
                        </button>
                    </div>
                </div>

                <div class="form-row_small">
                    <label class="text-sm text-slate-400">Revocation</label>
                    <div class="flex gap-2 items-center">
                        <input class="kc-input rounded-xl px-3 py-2 text-sm w-full" id="ep-revoke" value="@revoke" readonly />
                        <button type="button" class="btn-subtle" data-copy="#ep-revoke" title="Copy" aria-label="Copy">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="9" y="9" width="13" height="13" rx="2" /><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" /></svg>
                        </button>
                    </div>
                </div>

                <div class="form-row_small">
                    <label class="text-sm text-slate-400">Device Auth</label>
                    <div class="flex gap-2 items-center">
                        <input class="kc-input rounded-xl px-3 py-2 text-sm w-full" id="ep-device" value="@device" readonly />
                        <button type="button" class="btn-subtle" data-copy="#ep-device" title="Copy" aria-label="Copy">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="9" y="9" width="13" height="13" rx="2" /><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" /></svg>
                        </button>
                    </div>
                </div>
            </div>

            <div class="kc-th mt-2">Endpoints сформированы на основе вашего <code>Keycloak BaseUrl</code> и <code>realm</code>.</div>
        </div>
    </div>

    <!-- EVENTS -->
    <div class="tab-pane hidden" data-tab="Events" role="tabpanel">
        <div class="kc-card p-5 kc-hover">
            <div class="flex items-center justify-between mb-3">
                <div class="text-slate-200 font-semibold">Events</div>
                <div class="text-xs text-slate-400">Created: @(DateTime.Now.ToString("g")) by admin</div>
            </div>

            <div class="event-filters grid gap-2 mb-10">
                <div class="relative w-full">
                    <input id="evFilterType" class="kc-input kc-select rounded-xl px-3 py-2 text-m w-full" placeholder="All types" autocomplete="off" />
                    <div id="evTypeDd" class="absolute z-20 mt-1 w-full kc-card p-2 hidden text-m"></div>
                </div>
                <input id="evFrom" type="datetime-local" class="kc-input rounded-xl px-3 py-1.5 text-m w-full" />
                <input id="evTo" type="datetime-local" class="kc-input rounded-xl px-3 py-1.5 text-m w-full" />
                <input id="evUser" placeholder="User" class="kc-input rounded-xl px-3 py-1.5 text-m w-full" />
                <input id="evIp" placeholder="IP адрес" class="kc-input rounded-xl px-3 py-1.5 text-m w-full" />
                <button id="evSearchBtn" type="button" class="btn-subtle w-full h-full">Поиск</button>
            </div>

            <div class="grid grid-cols-12 gap-2 kc-th px-1 text-center">
                <div class="col-span-3">Тип события</div>
                <div class="col-span-3">Дата</div>
                <div class="col-span-3">Пользователь</div>
                <div class="col-span-3">IP адрес</div>
            </div>
            <div id="eventsRows" class="mt-1 text-center"></div>
            <div id="eventsPager"></div>
        </div>
    </div>
</div>

<!-- Hidden form for saving -->
<form method="post" id="saveForm" asp-page-handler="Save" asp-route-realm="@realm" asp-route-clientId="@clientId" class="hidden">
    <input type="hidden" asp-for="ReturnUrl" />
    <input type="hidden" asp-for="NewClientId" id="hidClientId" />
    <input type="hidden" asp-for="Description" id="hidDescription" />
    <input type="hidden" asp-for="Enabled" id="hidEnabled" />
    <input type="hidden" asp-for="ClientAuth" id="hidClientAuth" />
    <input type="hidden" asp-for="StandardFlow" id="hidStandardFlow" />
    <input type="hidden" asp-for="ServiceAccount" id="hidServiceAccount" />
    <input type="hidden" asp-for="RedirectUrisJson" id="hidRedirects" />
    <input type="hidden" asp-for="LocalRolesJson" id="hidLocalRoles" />
    <input type="hidden" asp-for="ServiceRolesJson" id="hidServiceRoles" />
</form>

<form method="post" id="deleteForm" asp-page-handler="Delete" asp-route-realm="@realm" asp-route-clientId="@clientId" class="hidden">
    <input type="hidden" asp-for="ReturnUrl" />
</form>

@section Toasts {
    @if (TempData["FlashOk"] is string ok)
    {
        @await Html.PartialAsync("_FlashToast", new FlashToastModel
        {
            Type = FlashToastType.Success,
            MessageHtml = Html.Raw(ok),
            Id = "flashToastOk"
        })
    }
    @if (TempData["FlashError"] is string err)
    {
        @await Html.PartialAsync("_FlashToast", new FlashToastModel
        {
            Type = FlashToastType.Error,
            Message = err,
            Id = "flashToastError"
        })
    }
}

@section Scripts {
    <script src="~/js/client-secret.js" data-soft-nav></script>
    <script data-soft-nav>
        (() => {
          (function(){
          // ---------- Вкладки ----------
          const btns  = document.querySelectorAll('.tab-btn');
          const panes = document.querySelectorAll('.tab-pane');

          const prevEventsDocClick = window.__eventsDocClick;
          if (prevEventsDocClick)
          {
            try
            {
              if (typeof prevEventsDocClick.abort === 'function')
              {
                prevEventsDocClick.abort();
              }
              else if (typeof prevEventsDocClick === 'function')
              {
                document.removeEventListener('click', prevEventsDocClick);
              }
            }
            catch (error)
            {
              console.error('Failed to detach previous events click handler:', error);
            }
            delete window.__eventsDocClick;
          }

          let eventsInitialized = false;
          const ensureEventsInit = () => {
            if (eventsInitialized) return;
            initEvents();
            eventsInitialized = true;
          };

          function showTab(tab){
            panes.forEach(p => p.classList.toggle('hidden', p.dataset.tab !== tab));
            btns.forEach(b => {
              const active = (b.dataset.tab === tab);
              b.classList.toggle('active', active);
              b.setAttribute('aria-selected', active ? 'true' : 'false');
            });
            history.replaceState(null, '', '#tab=' + encodeURIComponent(tab));
            if (tab === 'Events') ensureEventsInit();
          }
          const m = location.hash.match(/tab=([^&]+)/);
          const start = m ? decodeURIComponent(m[1]) : 'Overview';
          btns.forEach(b => b.addEventListener('click', ()=> showTab(b.dataset.tab)));
          showTab(start);

          // ---------- Состояние формы ----------
          const realm = '@realm';
          const clientId = '@clientId';
          const clientUuid = '@Model.Client.ClientUuid';
          const pageUrl = '@Url.Page(null)';
          const redirs   = JSON.parse('@Html.Raw(Model.RedirectUrisJson)');
          const locals   = JSON.parse('@Html.Raw(Model.LocalRolesJson)');
          @* const scopes   = JSON.parse('@Html.Raw(Model.DefaultScopesJson)'); *@

          const swEnabled    = document.getElementById('swEnabled');
          const lblEnabled   = document.getElementById('lblEnabled');
          const swClientAuth = document.getElementById('swClientAuth');
          const swService    = document.getElementById('swService');
          const tabServiceRoles = document.querySelector('.tab-btn[data-tab="ServiceRoles"]');

          function updateServiceRolesTab(){
            const on = swService?.checked;
            tabServiceRoles?.classList.toggle('kc-disabled', !on);
            const active = document.querySelector('.tab-btn.active')?.dataset.tab;
            if (!on && active === 'ServiceRoles') showTab('Overview');
          }

          function updateServiceState(){
            const authOn = swClientAuth?.checked;
            if (!authOn && swService){ swService.checked = false; }
            updateServiceRolesTab();
          }

          function updateEnabledLabel(){
            if (!lblEnabled || !swEnabled) return;
            const on = swEnabled.checked;
            lblEnabled.textContent = on ? 'Enabled' : 'Disabled';
            lblEnabled.className = 'inline-flex items-center rounded-full px-2 py-1 text-xs border border-white/10 '
              + (on ? 'bg-emerald-500/20 text-emerald-200' : 'bg-rose-500/20 text-rose-200');
          }

          swEnabled?.addEventListener('change', updateEnabledLabel);
          swClientAuth?.addEventListener('change', updateServiceState);
          swService?.addEventListener('change', () => {
            if (swService?.checked && swClientAuth && !swClientAuth.checked){
              swClientAuth.checked = true;
            }
            updateServiceState();
          });
          updateServiceState();
          updateEnabledLabel();

          // Redirect URIs
          const swStandard = document.getElementById('swStandard');
          const redirectPanel = document.getElementById('redirectPanel');
          const redirInput = document.getElementById('redirInput');
          const redirList  = document.getElementById('redirList');
          const btnAddRedirect = document.getElementById('btnAddRedirect');
          renderChips(redirList, redirs);

          function renderChips(el, arr){
            el.innerHTML = '';
            arr.forEach((v, idx)=>{
              const chip = document.createElement('span');
              chip.className = 'kc-chip';
              chip.textContent = v;

              const space = document.createTextNode(' ');
              const button = document.createElement('button');
              button.type = 'button';
              button.title = 'Remove';
              button.textContent = '×';

              button.addEventListener('click', ()=>{ arr.splice(idx,1); renderChips(el, arr); });

              chip.appendChild(space);
              chip.appendChild(button);
              el.appendChild(chip);
            });
          }
          function renderStaticChips(el, arr){
            el.innerHTML = '';
            arr.forEach(v =>{
              const chip = document.createElement('span');
              chip.className = 'kc-chip';
              chip.textContent = v;
              el.appendChild(chip);
            });
          }
          btnAddRedirect?.addEventListener('click', ()=>{
            const v = (redirInput.value||'').trim(); if(!v) return;
            redirs.push(v); redirInput.value=''; renderChips(redirList, redirs);
          });

          function updateRedirectDisabled(){
            const on = swStandard?.checked;
            redirectPanel.classList.toggle('kc-disabled', !on);
            [redirInput, btnAddRedirect].forEach(x => x && (x.disabled = !on));
            redirectPanel.querySelectorAll('button').forEach(b => b.disabled = !on);
          }
          swStandard?.addEventListener('change', updateRedirectDisabled);
          updateRedirectDisabled();

          // Local roles
          const locInput = document.getElementById('locInput');
          const locList  = document.getElementById('locList');
          renderChips(locList, locals);
          document.getElementById('btnAddLocal')?.addEventListener('click', ()=>{
            const v = (locInput.value||'').trim(); if(!v) return;
            const prefix = 'kc-gf-';
            const valueWithPrefix = v.startsWith(prefix) ? v : prefix + v;
            locals.push(valueWithPrefix); locInput.value=''; renderChips(locList, locals);
          });

          // Default scopes (disabled)
          // const scopesList = document.getElementById('scopesList');
          // renderStaticChips(scopesList, scopes);

          const copyMessages = {
            success: 'Значение скопировано',
            error: 'Не удалось скопировать значение',
            unsupported: 'Копирование недоступно'
          };

          function showCopyNotice(trigger, message, variant = 'success') {
            if (!(trigger instanceof HTMLElement)) return;

            const host = trigger.parentElement instanceof HTMLElement ? trigger.parentElement : trigger;
            host.classList.add('copy-notice-host');

            const existing = host.querySelector('.copy-notice');
            existing?.remove();

            const notice = document.createElement('div');
            notice.className = `copy-notice ${variant === 'error' ? 'copy-notice_error' : 'copy-notice_success'}`;
            notice.textContent = message;
            notice.setAttribute('role', 'status');
            notice.setAttribute('aria-live', 'polite');

            const hostRect = host.getBoundingClientRect();
            const btnRect = trigger.getBoundingClientRect();
            const left = btnRect.left - hostRect.left + btnRect.width / 2;
            const top = btnRect.top - hostRect.top;

            notice.style.left = `${left}px`;
            notice.style.top = `${top}px`;

            host.appendChild(notice);

            requestAnimationFrame(() => {
              notice.classList.add('copy-notice_visible');
            });

            window.setTimeout(() => {
              notice.classList.remove('copy-notice_visible');
            }, 2000);

            const removeTimer = window.setTimeout(() => {
              notice.remove();
            }, 2400);

            notice.addEventListener('transitionend', event => {
              if (event.propertyName === 'opacity' && !notice.classList.contains('copy-notice_visible')) {
                window.clearTimeout(removeTimer);
                notice.remove();
              }
            });
          }

          function ensureClipboardSupport(trigger) {
            if (!navigator.clipboard?.writeText) {
              showCopyNotice(trigger, copyMessages.unsupported, 'error');
              return false;
            }
            return true;
          }

          async function copyToClipboard(value, trigger, successMessage = copyMessages.success) {
            try {
              await navigator.clipboard.writeText(value ?? '');
              showCopyNotice(trigger, successMessage, 'success');
              return true;
            } catch {
              showCopyNotice(trigger, copyMessages.error, 'error');
              return false;
            }
          }

          // Copy endpoints
          document.querySelectorAll('button[data-copy]')?.forEach(btn => {
            if (!(btn instanceof HTMLElement)) return;
            btn.addEventListener('click', async () => {
              if (!ensureClipboardSupport(btn)) return;
              const sel = btn.getAttribute('data-copy');
              const target = sel ? document.querySelector(sel) : null;
              const val = target?.value || target?.textContent || '';
              await copyToClipboard(val, btn);
            });
          });

          // Copy credentials & manage secret
          const btnCopyClientId = document.getElementById('btnCopyClientId');
          btnCopyClientId?.addEventListener('click', async () => {
            if (!ensureClipboardSupport(btnCopyClientId)) return;
            const val = document.getElementById('credClientId')?.value || '';
            await copyToClipboard(val, btnCopyClientId);
          });

          const secretMask = '••••••••••••••';
          let secretVisible = false;

          const secretUtils = window.ClientSecret || {};
          const toastHost = document.getElementById('toastsHost');
          const secretEndpoint = `/api/client-secret?realm=${encodeURIComponent(realm)}&clientId=${encodeURIComponent(clientId)}`;

          const showSecretError = (message, error) => {
            console.error(message, error);
            if (typeof secretUtils.showErrorToast === 'function') {
              secretUtils.showErrorToast(message, { host: toastHost });
            }
          };

          async function fetchSecret(method = 'GET') {
            if (typeof secretUtils.fetchClientSecret !== 'function') {
              throw new Error('Client secret utilities are not available.');
            }
            return await secretUtils.fetchClientSecret({
              url: secretEndpoint,
              method,
              fetchImpl: (...args) => fetch(...args)
            });
          }

          const btnShowSecret = document.getElementById('btnShowSecret');
          btnShowSecret?.addEventListener('click', async () => {
            const input = document.getElementById('credSecret');
            if (!input) return;
            if (secretVisible) {
              input.value = secretMask;
              secretVisible = false;
              btnShowSecret.title = 'Показать';
              btnShowSecret.setAttribute('aria-label','Показать');
            } else {
              try {
                const secret = await fetchSecret('GET');
                input.value = secret;
                secretVisible = true;
                btnShowSecret.title = 'Скрыть';
                btnShowSecret.setAttribute('aria-label','Скрыть');
              } catch (error) {
                showSecretError('Не удалось получить секрет клиента.', error);
              }
            }
          });

          const btnCopySecret = document.getElementById('btnCopySecret');
          btnCopySecret?.addEventListener('click', async () => {
            if (!ensureClipboardSupport(btnCopySecret)) return;
            let secretValue;
            if (secretVisible) {
              secretValue = document.getElementById('credSecret')?.value || '';
            } else {
              try {
                secretValue = await fetchSecret('GET');
              } catch (error) {
                showSecretError('Не удалось получить секрет клиента для копирования.', error);
                return;
              }
            }
            const input = document.getElementById('credSecret');
            if (input && !secretVisible) input.value = secretMask;
            if (!secretVisible) {
              btnShowSecret && (btnShowSecret.title = 'Показать', btnShowSecret.setAttribute('aria-label','Показать'));
            }
            await copyToClipboard(secretValue, btnCopySecret);
          });

          document.getElementById('btnRegenSecret')?.addEventListener('click', async () => {
            try {
              const secret = await fetchSecret('POST');
              const input = document.getElementById('credSecret');
              if (input) input.value = secret;
              secretVisible = true;
              btnShowSecret && (btnShowSecret.title = 'Скрыть', btnShowSecret.setAttribute('aria-label','Скрыть'));
            } catch (error) {
              showSecretError('Не удалось сгенерировать новый секрет клиента.', error);
            }
          });

          function initTokenTab(){
            const usernameInput = document.getElementById('tokenUsername');
            const btnGenerate = document.getElementById('btnGenerateToken');
            const payloadEl = document.getElementById('tokenPayload');
            const errorEl = document.getElementById('tokenError');
            const statusEl = document.getElementById('tokenStatus');
            const metaEl = document.getElementById('tokenMeta');
            const typeInputs = Array.from(document.querySelectorAll('input[name="tokenType"]'));

            if (!(usernameInput instanceof HTMLInputElement) || !(btnGenerate instanceof HTMLButtonElement) || !(payloadEl instanceof HTMLElement)){
              return;
            }

            const defaultPayloadText = payloadEl.textContent || '';
            const typeLabels = {
              AccessToken: 'Access Token',
              IdToken: 'ID Token',
              UserInfo: 'User Info'
            };

            const setError = message => {
              if (!(errorEl instanceof HTMLElement)) return;
              if (message){
                errorEl.textContent = message;
                errorEl.classList.add('show');
              } else {
                errorEl.textContent = '';
                errorEl.classList.remove('show');
              }
            };

            const setStatus = message => {
              if (statusEl instanceof HTMLElement){
                statusEl.textContent = message || '';
              }
            };

            const setMeta = (kind, userId) => {
              if (!(metaEl instanceof HTMLElement)) return;
              const parts = [];
              if (kind){
                const label = typeLabels[kind] || kind;
                parts.push(`Тип: ${label}`);
              }
              if (userId){
                parts.push(`User ID: ${userId}`);
              }
              metaEl.textContent = parts.join(' • ');
            };

            const getSelectedType = () => {
              const selected = typeInputs.find(input => input instanceof HTMLInputElement && input.checked);
              return selected ? selected.value : 'AccessToken';
            };

            const setLoading = on => {
              if (btnGenerate){
                btnGenerate.disabled = on;
                btnGenerate.classList.toggle('kc-disabled', !!on);
              }
              if (on){
                setStatus('Генерация…');
              } else if (statusEl instanceof HTMLElement && statusEl.textContent === 'Генерация…'){
                setStatus('');
              }
            };

            const renderPayload = data => {
              if (!payloadEl) return;
              if (!data || data.payload == null){
                payloadEl.textContent = defaultPayloadText;
                return;
              }
              if (data.isJson && typeof data.payload === 'object'){
                try {
                  payloadEl.textContent = JSON.stringify(data.payload, null, 2);
                } catch {
                  payloadEl.textContent = String(data.payload);
                }
              } else {
                payloadEl.textContent = String(data.payload);
              }
            };

            const requestToken = async () => {
              const username = (usernameInput.value || '').trim();
              if (!username){
                setError('Введите username пользователя.');
                usernameInput.focus();
                return;
              }

              setError('');
              setMeta(null, null);
              setStatus('');
              payloadEl.textContent = 'Загрузка…';
              setLoading(true);

              try {
                const params = new URLSearchParams({ realm, clientId, username, type: getSelectedType() });
                if (clientUuid){
                  params.set('clientUuid', clientUuid);
                }
                const response = await fetch(`${pageUrl}?handler=GenerateToken&${params.toString()}`, {
                  headers: { 'Accept': 'application/json' }
                });
                let body = null;
                try {
                  body = await response.json();
                } catch {
                  body = null;
                }

                if (!response.ok){
                  const message = body && body.error ? body.error : `Ошибка ${response.status}`;
                  throw new Error(message);
                }

                renderPayload(body);
                setError('');
                setMeta(body?.tokenType, body?.userId);
                setStatus('Готово');
                window.setTimeout(() => { if (statusEl?.textContent === 'Готово') setStatus(''); }, 4000);
              } catch (err) {
                const message = err instanceof Error ? err.message : String(err);
                setError(message);
                renderPayload(null);
                setMeta(null, null);
                setStatus('');
              } finally {
                setLoading(false);
              }
            };

            btnGenerate.addEventListener('click', requestToken);
            usernameInput.addEventListener('keydown', ev => {
              if (ev.key === 'Enter'){
                ev.preventDefault();
                requestToken();
              }
            });
          }

          initTokenTab();

          // ---------- Events (ленивая инициализация) ----------
          function initEvents(){
            const PAGE_URL = '@Url.Page(null)';
            const pageSize = 10;
            const rowsEl  = document.getElementById('eventsRows');
            const pagerEl = document.getElementById('eventsPager');
            const inType  = document.getElementById('evFilterType');
            const ddType  = document.getElementById('evTypeDd');
            const inFrom  = document.getElementById('evFrom');
            const inTo    = document.getElementById('evTo');
            const inUser  = document.getElementById('evUser');
            const inIp    = document.getElementById('evIp');
            const btnSearch = document.getElementById('evSearchBtn');

            const types = JSON.parse('@Html.Raw(Model.EventTypesJson)');

            function renderTypeDd(){
              if(!ddType) return;
              const q = (inType.value||'').trim().toLowerCase();
              ddType.innerHTML = '';
              const hits = types.filter(t=> t.toLowerCase().includes(q)).slice(0,20);
              hits.forEach(t=>{
                const div = document.createElement('div');
                div.className = 'px-3 py-1 cursor-pointer hover:bg-white/10 rounded';
                div.textContent = t;
                div.addEventListener('click', ()=>{ inType.value=t; ddType.classList.add('hidden'); });
                ddType.appendChild(div);
              });
              ddType.classList.toggle('hidden', hits.length===0);
            }

            inType?.addEventListener('input', renderTypeDd);
            inType?.addEventListener('focus', renderTypeDd);
            const onDocumentClick = e => {
              if (!ddType) return;
              if (e.target !== inType && !ddType.contains(e.target)) {
                ddType.classList.add('hidden');
              }
            };
            const docClickController = new AbortController();
            const docClickSignal = docClickController.signal;

            document.addEventListener('click', onDocumentClick, { signal: docClickSignal });

            const teardownRef = {
              abort: () =>
              {
                docClickController.abort();
                ddType?.classList.add('hidden');
                if (window.__eventsDocClick === teardownRef)
                {
                  delete window.__eventsDocClick;
                }
              }
            };

            window.__eventsDocClick = teardownRef;

            const appRoot = document.getElementById('app');
            if (appRoot)
            {
              appRoot.addEventListener('soft:teardown', teardownRef.abort, { once: true });
            }

            [inType,inFrom,inTo,inUser,inIp].forEach(el=> el?.addEventListener('keydown', ev=>{ if(ev.key==='Enter'){ ev.preventDefault(); load(); }}));

            let all = [];
            let page = 1;
            const fmt = s => new Date(s).toLocaleString();

            async function fetchJson(url){
              const r = await fetch(url,{headers:{'Accept':'application/json'}});
              if(!r.ok) throw new Error('HTTP '+r.status);
              return r.json();
            }

            async function load(){
              const params = new URLSearchParams({ realm, clientId });
              const typeVal = (inType.value||'').trim();
              if (typeVal) params.set('type', typeVal);
              if (inFrom.value) params.set('from', inFrom.value);
              if (inTo.value) params.set('to', inTo.value);
              if ((inUser.value||'').trim()) params.set('user', inUser.value.trim());
              if ((inIp.value||'').trim()) params.set('ip', inIp.value.trim());
              const url = `${PAGE_URL}?handler=Events&${params.toString()}`;
              try { all = await fetchJson(url); } catch { all = []; }
              page = 1;
              render();
            }

            function render(){
              const totalPages = Math.max(1, Math.ceil(all.length / pageSize));
              if (page > totalPages) page = totalPages;

              rowsEl.innerHTML = '';
              const slice = all.slice((page-1)*pageSize, page*pageSize);
              slice.forEach(e=>{
                rowsEl.insertAdjacentHTML('beforeend', `
                  <div class="grid grid-cols-12 gap-2 text-sm py-2 border-b border-white/5 px-1">
                    <div class="col-span-3 text-slate-200">${e.type}</div>
                    <div class="col-span-3 text-slate-300">${fmt(e.at)}</div>
                    <div class="col-span-3 text-slate-300">${e.user||''}</div>
                    <div class="col-span-3 text-slate-400">${e.ip||''}</div>
                  </div>
                `);
              });

              pagerEl.innerHTML = '';
              if (totalPages > 1){
                const mk = (label,target,disabled=false,active=false)=>
                  `<a class="rounded-lg px-3 py-1 text-sm border border-white/10 ${active?'bg-white/10 text-white':(disabled?'pointer-events-none opacity-50':'bg-white/5 hover:bg-white/10')}" href="#tab=Events" data-page="${target}">${label}</a>`;
                const inner = [
                  mk('Prev', Math.max(1,page-1), page===1),
                  ...Array.from({length: totalPages}, (_,i)=> mk(String(i+1), i+1, false, i+1===page)),
                  mk('Next', Math.min(totalPages,page+1), page===totalPages)
                ].join('');
                pagerEl.insertAdjacentHTML('beforeend', `<div class="flex items-center justify-center gap-1 mt-4">${inner}</div>`);
                pagerEl.querySelectorAll('a[data-page]').forEach(a => a.addEventListener('click', ev=>{ ev.preventDefault(); page = parseInt(a.dataset.page,10); render(); }));
              }
            }

            btnSearch?.addEventListener('click', load);
            load();
          }
          if (document.querySelector('.tab-btn.active')?.dataset.tab === 'Events'){
            ensureEventsInit();
          }
          // ---------- Сбор данных перед Save ----------
          const saveForm = document.getElementById('saveForm');
          const btnDelete = document.getElementById('btnDelete');
          function collect()
          {
            // базовые
            document.getElementById('hidClientId').value       = (document.getElementById('ovClientId').value||'').trim();
            document.getElementById('hidDescription').value    = (document.getElementById('ovDesc').value||'').trim();
            document.getElementById('hidEnabled').value        = document.getElementById('swEnabled').checked ? 'true' : 'false';
            document.getElementById('hidClientAuth').value     = document.getElementById('swClientAuth').checked ? 'true' : 'false';
            document.getElementById('hidStandardFlow').value   = document.getElementById('swStandard').checked ? 'true' : 'false';
            document.getElementById('hidServiceAccount').value = document.getElementById('swService').checked ? 'true' : 'false';
            // массивы
            document.getElementById('hidRedirects').value    = JSON.stringify(redirs);
            document.getElementById('hidLocalRoles').value   = JSON.stringify(locals);
          }
          btnDelete?.addEventListener('click', e=>{ if(!confirm('Вы действительно хотите удалить клиента?')) e.preventDefault(); });
          saveForm?.addEventListener('submit', collect);
        })();
        })();
    </script>
    <script type="module" data-soft-nav>
        import { initServiceRoles } from '@Url.Content("~/js/service-roles.js")';

        const root = document.querySelector('.tab-pane[data-tab="ServiceRoles"]');
        const hiddenInput = document.getElementById('hidServiceRoles');
        const initialRoles = JSON.parse('@Html.Raw(Model.ServiceRolesJson)');

        if (root && hiddenInput) {
            initServiceRoles(root, {
                pageUrl: '@Url.Page(null)',
                hiddenInput,
                getRealm: () => '@realm',
                initialRoles: Array.isArray(initialRoles) ? initialRoles : []
            });
        }
    </script>
  }
