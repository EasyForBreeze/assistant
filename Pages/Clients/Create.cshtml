@page
@model Assistant.Pages.Clients.CreateModel
@{ 
    ViewData["Title"] = "Create client";
    var stepperGridClass = Model.IsAdmin ? "grid-cols-8" : "grid-cols-7";
}

<div class="space-y-5">
    @{
        Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> createHeaderLead = @<a asp-page="/Index" class="text-slate-400 text-sm hover:text-slate-200">&larr; Back to Clients</a>;
        Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> createHeaderRight = @<text>Realm: <span class="text-slate-200" id="realmHeader">—</span></text>;
    }
    @await Html.PartialAsync("_AuroraHeader", new AuroraHeaderModel
    {
        Title = "Create client",
        HeadingTag = "h1",
        ThemeClass = "aurora-green-indigo",
        Classes = "p-5 md:p-6 relative overflow-hidden",
        ContentClasses = "relative flex items-center justify-between",
        TitleCssClass = "mt-1 text-3xl md:text-4xl text-white tracking-tight drop-shadow-[0_6px_18px_rgba(99,102,241,0.25)]",
        TitleLeadContent = createHeaderLead,
        Subtitle = "Пошаговый мастер создания клиента Keycloak.",
        SubtitleCssClass = "text-slate-300 text-sm",
        RightContent = createHeaderRight,
        RightContainerClasses = "text-slate-400 text-sm"
    })

    <!-- Stepper -->
    <div class="kc-card md:max-w-[1000px] mx-auto">
        <div class="p-5">
            <div class="grid @stepperGridClass gap-1">
                <div class="step" id="stepHead1"><div class="dot">1</div><div class="label">Realm</div></div>
                <div class="step" id="stepHead2"><div class="dot">2</div><div class="label">Basics</div></div>
                <div class="step" id="stepHead3"><div class="dot">3</div><div class="label">System info</div></div>
                <div class="step" id="stepHead4"><div class="dot">4</div><div class="label">Flows</div></div>
                <div class="step" id="stepHead5"><div class="dot">5</div><div class="label">Redirect URIs</div></div>
                <div class="step" id="stepHead6"><div class="dot">6</div><div class="label">Local roles</div></div>
                <div class="step" id="stepHead7"><div class="dot">7</div><div class="label">Service roles</div></div>
                @if (Model.IsAdmin)
                {
                    <div class="step" id="stepHead8"><div class="dot">8</div><div class="label">Creatio</div></div>
                }
            </div>
            <div class="mt-3 divider"></div>
        </div>

        <form method="post" id="createForm" class="p-5" asp-page-handler="Create" autocomplete="off" data-soft-ignore>
            <!-- hidden -->
            <input type="hidden" asp-for="ClientId" id="hidClientId" />
            <input type="hidden" asp-for="Description" id="hidDesc" />
            <input type="hidden" asp-for="ClientAuth" id="hidClientAuth" />
            <input type="hidden" asp-for="FlowStandard" id="hidFlowStandard" />
            <input type="hidden" asp-for="FlowService" id="hidFlowService" />
            <input type="hidden" asp-for="RedirectUrisJson" id="hidRedirects" />
            <input type="hidden" asp-for="LocalRolesJson" id="hidLocalRoles" />
            <input type="hidden" asp-for="ServiceRolesJson" id="hidServiceRoles" />
            <input type="hidden" asp-for="AppName" id="hidAppName" />
            <input type="hidden" asp-for="AppUrl" id="hidAppUrl" />
            <input type="hidden" asp-for="ServiceOwner" id="hidServiceOwner" />
            <input type="hidden" asp-for="ServiceManager" id="hidServiceManager" />
            <input type="hidden" asp-for="CreatioRequestNumber" id="hidCreatioRequestNumber" />
            <input type="hidden" asp-for="CreatioSecretEmail" id="hidCreatioSecretEmail" />

            <!-- Шаг 1: Realm -->
            <div class="space-y-4" id="step-1" data-step="1">
                <div class="text-slate-200 font-semibold text-lg">1. Выбор Realm</div>

                <div class="grid md:grid-cols-2 gap-4">
                    <!-- Слева: селект + что такое realm -->
                    <div>
                        <label class="block text-sm text-slate-400 mb-1">Realm</label>
                        <select asp-for="Realm" asp-items="Model.RealmOptions" id="realmSelect" class="kc-input kc-select kc-select-dark rounded-xl px-3 py-2 text-sm w-full"></select>
                        <div id="errRealm" class="err">Выберите realm.</div>

                        <div class="hint mt-3">
                            <div class="text-slate-300 mb-1 font-medium">Что такое Realm?</div>
                            Изолированная область Keycloak со своими пользователями, ролями и клиентами.
                            Объекты разных реалмов не пересекаются.
                        </div>
                    </div>

                    <!-- Справа: описание выбранного реалма -->
                    <div class="kc-card p-4">
                        <div class="text-slate-300 mb-1 font-medium" id="realmDescTitle">Описание реалма</div>
                        <div class="text-slate-400 text-sm" id="realmDescBody">Описание реалма отсутствует.</div>
                    </div>
                </div>
            </div>

            <!-- Шаг 2: Basics -->
            <div class="space-y-4 hidden" id="step-2" data-step="2">
                <div class="text-slate-200 font-semibold text-lg">2. Client basics</div>
                <div class="grid md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm text-slate-400 mb-1">Client ID</label>
                        <div class="prefix-wrap">
                            <span class="prefix-chip" id="cidPrefix">app-bank-</span>
                            <input id="cidInput"
                                   class="prefix-input text-sm"
                                   maxlength="25"
                                   placeholder="my-service"
                                   autocomplete="off" autocapitalize="off" spellcheck="false"
                                   value="@(Model.ClientId != null && Model.ClientId.StartsWith("app-bank-") ? Model.ClientId.Substring("app-bank-".Length) : (Model.ClientId ?? ""))" />
                        </div>
                        <div id="errCid" class="err">Укажите Client ID (часть после префикса).</div>
                        <div class="hint mt-1">Префикс <b>app-bank-</b> помогает соблюдать корпоративный стандарт.</div>
                    </div>
                    <div>
                        <label class="block text-sm text-slate-400 mb-1">Description <span class="text-slate-500">(необязательно)</span></label>
                        <input id="descInput"
                               value="@(Model.Description ?? "")"
                               maxlength="64"
                               class="kc-input rounded-xl px-3 pp-y text-sm w-full"
                               placeholder="Краткое описание клиента"
                               autocomplete="off" autocapitalize="off" spellcheck="false" />
                        <div class="hint mt-1.5">Например: «Веб-приложение для платежей».</div>
                    </div>
                </div>
            </div>

            <!-- Шаг 3: System info (АС) -->
            <div class="space-y-4 hidden" id="step-3" data-step="3">
                <div class="text-slate-200 font-semibold text-lg">3. Сведения об АС</div>

                <div class="grid md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm text-slate-400 mb-1">Название АС <span class="text-rose-500">*</span></label>
                        <input id="appName"
                               value="@(Model.AppName ?? "")"
                               maxlength="40"
                               class="kc-input kc-select-dark rounded-xl px-3 py-2 text-sm w-full"
                               placeholder="Напр., «Платёжный сервис»"
                               autocomplete="off" autocapitalize="off" spellcheck="false" />
                        <div id="errAppName" class="err">Укажите название АС.</div>
                    </div>

                    <div>
                        <label class="block text-sm text-slate-400 mb-1">Ссылка на АС</label>
                        <input id="appUrl"
                               value="@(Model.AppUrl ?? "")"
                               maxlength="100"
                               type="url"
                               class="kc-input kc-select-dark rounded-xl px-3 py-2 text-sm w-full"
                               placeholder="https://example.company/app"
                               autocomplete="off" autocapitalize="off" spellcheck="false" />
                    </div>

                    <div>
                        <label class="block text-sm text-slate-400 mb-1">Владелец сервиса</label>
                        <input id="serviceOwner"
                               value="@(Model.ServiceOwner ?? "")"
                               maxlength="25"
                               class="kc-input kc-select-dark rounded-xl px-3 py-2 text-sm w-full"
                               placeholder="ФИО"
                               autocomplete="off" autocapitalize="off" spellcheck="false" />
                    </div>

                    <div>
                        <label class="block text-sm text-slate-400 mb-1">Менеджер сервиса</label>
                        <input id="serviceManager"
                               value="@(Model.ServiceManager ?? "")"
                               maxlength="30"
                               class="kc-input kc-select-dark rounded-xl px-3 py-2 text-sm w-full"
                               placeholder="ФИО"
                               autocomplete="off" autocapitalize="off" spellcheck="false" />
                    </div>
                </div>
            </div>

            <!-- Шаг 4: Flows -->
            <div class="space-y-4 hidden" id="step-4" data-step="4">
                <div class="text-slate-200 font-semibold text-lg">4. Выбор Flow</div>

                <div class="kc-card p-4">
                    <div class="flex items-center justify-between">
                        <div>
                            <div class="font-semibold text-slate-200">Client Authentication</div>
                            <div class="hint">Включайте для <i>confidential</i> клиентов (бэкенды). Нужен <b>client_secret</b> или ключ. Выключено — публичный клиент (SPA/мобильный).</div>
                        </div>
                        <label class="kc-switch inline-flex items-center">
                            <input type="checkbox" id="swClientAuth" @(Model.ClientAuth ? "checked" : "") />
                            <div class="track"><span class="dot"></span></div>
                        </label>
                    </div>
                </div>

                <div class="kc-card p-4">
                    <div class="flex items-center justify-between">
                        <div>
                            <div class="font-semibold text-slate-200">Standard flow (Authorization Code)</div>
                            <div class="hint">Для логинов через браузер. Даёт токен взамен кода авторизации, Требует <b>Redirect URI</b>.</div>
                        </div>
                        <label class="kc-switch inline-flex items-center">
                            <input type="checkbox" id="swStandard" @(Model.FlowStandard ? "checked" : "") />
                            <div class="track"><span class="dot"></span></div>
                        </label>
                    </div>
                </div>

                <div class="kc-card p-4">
                    <div class="flex items-center justify-between">
                        <div>
                            <div class="font-semibold text-slate-200">Service account (Client Credentials)</div>
                            <div class="hint">Для интеграций «машина-машина» без пользователя. Роли задают права доступа к API.</div>
                        </div>
                        <label class="kc-switch inline-flex items-center">
                            <input type="checkbox" id="swService" @(Model.FlowService ? "checked" : "") />
                            <div class="track"><span class="dot"></span></div>
                        </label>
                    </div>
                </div>
            </div>

            <!-- Шаг 5: Redirect URIs -->
            <div class="space-y-3 hidden" id="step-5" data-step="5">
                <div class="text-slate-200 font-semibold text-lg">5. Redirect URIs</div>
                <div class="hint">Нужны для <b>Standard flow</b>: сюда Keycloak возвращает пользователя после логина. указать домен обязательно, далее можно использовать * для разрешения любых путей.</div>
                <div class="kc-mini mt-1">Пример: <code>https://localhost:8080/*</code>.</div>
                <div id="redirList" class="flex flex-wrap gap-2"></div>
                <div class="flex gap-2">
                    <input id="redirInput" maxlength="100" class="kc-input rounded-xl px-3 py-2 text-sm w-full" placeholder="https://app.example.com/callback" autocomplete="off" autocapitalize="off" spellcheck="false" />
                    <button type="button" class="btn-subtle" onclick="addRedirect()">Add</button>
                </div>
            </div>

            <!-- Шаг 6: Local roles -->
            <div class="space-y-3 hidden" id="step-6" data-step="6">
                <div class="text-slate-200 font-semibold text-lg">6. Local roles</div>
                <div class="hint">Создаются на этом клиенте для назначения другим клиентам/пользователям для доступа.</div>
                <div id="locList" class="flex flex-wrap gap-2"></div>
                <div class="flex gap-2 items-center">
                    <div class="prefix-wrap w-full md:w-72">
                        <span class="prefix-chip">kc-gf-</span>
                        <input id="locInput" maxlength="25" class="prefix-input text-sm" placeholder="Например: app.read" autocomplete="off" autocapitalize="off" spellcheck="false" />
                    </div>
                    <button type="button" class="btn-subtle" onclick="addLocal()">Add</button>
                </div>
            </div>

            <!-- Шаг 7: Service roles -->
            <div class="space-y-4 hidden" data-step="7">
                <div class="text-slate-200 font-semibold text-lg">7. Service roles</div>
                <div class="hint">
                    Введите <b>clientId</b> (или часть) <u>или</u> фрагмент имени роли. В результатах можно
                    выбрать клиента (чтобы просмотреть все его роли) или сразу роль для добавления.
                </div>

                <!-- Выбранные роли (чипсы) -->
                <div id="svcList" class="flex flex-wrap gap-2 mb-2"></div>

                <!-- Поиск клиента ИЛИ роли -->
                <div class="relative space-y-2">
                    <div class="flex gap-2 items-center">
                        <input id="svcSearchInput"
                               class="kc-input kc-select-dark rounded-xl px-3 py-2 text-sm w-full md:w-[360px]"
                               placeholder="например: app-bank-portal или 'read'"
                               autocomplete="off" autocapitalize="off" spellcheck="false"/>
                        <button type="button" id="svcSearchBtn" class="btn-subtle">Найти</button>
                    </div>

                    <!-- Выпадающий список найденных клиентов/ролей -->
                    <div id="svcSearchDd"
                         class="absolute z-20 mt-1 w-full md:w-[420px] kc-card p-2 hidden"></div>
                </div>

                <!-- Выбранный клиент + его роли -->
                <div id="svcChosen" class="hidden space-y-3">
                    <div class="flex items-center gap-3">
                        <span class="kc-tag" id="svcChosenTag"></span>
                        <button type="button" class="btn-link underline text-slate-300" id="svcChange">Сменить сервис</button>
                    </div>

                    <!-- Список ролей выбранного клиента -->
                    <div id="svcRoleList" class="grid md:grid-cols-2 gap-2"></div>
                    <div><button type="button" id="btnMoreRoles" class="btn-subtle hidden">Показать ещё</button></div>

                <div id="svcErr" class="err"></div>
                <div class="kc-mini">Клик по роли добавляет её в список выше. Формат: <code>clientId: roleName</code>.</div>
            </div>
        </div>

        @if (Model.IsAdmin)
        {
            <!-- Шаг 8: Creatio -->
            <div class="space-y-4 hidden" id="step-8" data-step="8">
                <div class="text-slate-200 font-semibold text-lg">8. Заявка Creatio</div>
                <div class="grid md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm text-slate-400 mb-1">Номер заявки Creatio</label>
                        <input id="creatioRequest"
                               value="@(Model.CreatioRequestNumber ?? string.Empty)"
                               maxlength="50"
                               class="kc-input kc-select-dark rounded-xl px-3 py-2 text-sm w-full"
                               placeholder="Например: CR-12345"
                               autocomplete="off" autocapitalize="off" spellcheck="false" />
                        <div id="errCreatioNumber" class="err">Укажите номер заявки Creatio.</div>
                    </div>
                    <div>
                        <label class="block text-sm text-slate-400 mb-1">Email для отправки пароля</label>
                        <input id="creatioEmail"
                               value="@(Model.CreatioSecretEmail ?? string.Empty)"
                               maxlength="100"
                               class="kc-input kc-select-dark rounded-xl px-3 py-2 text-sm w-full"
                               placeholder="user@example.com"
                               autocomplete="off" autocapitalize="off" spellcheck="false" />
                        <div id="errCreatioEmail" class="err">Укажите корректный email.</div>
                    </div>
                </div>
                <div class="hint">Укажите данные только для confidential клиентов. Пароль от архива будет направлен на указанную почту.</div>
            </div>
        }

        <!-- Навигация -->
        <div class="wizard-nav mt-6">
            <button type="button" class="btn-subtle" id="btnPrev">Back</button>
            <div class="wizard-right">
                <button type="button" class="btn-subtle" id="btnSkip" style="display:none">Skip</button>
                <button type="button" class="btn-primary" id="btnNext">Next</button>
                <button type="submit" class="btn-primary" id="btnCreate" style="display:none">Create client</button>
            </div>
        </div>
        </form>
    </div>
</div>

@if (!string.IsNullOrEmpty(Model.SecretArchiveBase64) && !string.IsNullOrEmpty(Model.SecretArchiveFileName))
{
    <div id="secretArchiveMeta"
         data-base64="@Model.SecretArchiveBase64"
         data-filename="@Model.SecretArchiveFileName"
         data-content-type="@(Model.SecretArchiveContentType ?? "application/zip")"
         hidden></div>
}

@if (Model.ShowSuccessModal && !string.IsNullOrEmpty(Model.ModalMessage))
{
    <div id="creationModal" class="fixed inset-0 z-50 flex items-center justify-center px-4">
        <div class="relative w-full max-w-2xl rounded-2xl bg-slate-900 p-6 shadow-2xl border border-white/10" data-modal-panel>
            <button type="button"
                    class="absolute top-3 right-3 text-slate-400 hover:text-slate-200"
                    aria-label="Закрыть"
                    data-close-modal>
                ×
            </button>
            <div class="text-xl font-semibold text-slate-100 mb-4">Конфигурация создана</div>
            <div class="rounded-xl bg-slate-950/60 border border-white/5 p-4 text-sm text-slate-200 whitespace-pre-line"
                 id="creationModalMessage">@Model.ModalMessage</div>
            <div class="mt-6 text-right">
                <button type="button" class="btn-primary" data-close-modal>Закрыть</button>
            </div>
        </div>
    </div>
}

@section Toasts {
    @if (!ViewContext.ViewData.ModelState.IsValid)
    {
        @await Html.PartialAsync("_FlashToast", new FlashToastModel
        {
            Type = FlashToastType.Error,
            Message = "Не удалось создать клиента",
            Id = "formErrorToast",
            IncludeValidationSummary = true
        })
    }
}

@section Scripts
{
    @if (Model.StepToShow > 0)
    {
        <script data-soft-nav>window.__stepToShow = @Model.StepToShow;</script>
    }
    <script data-soft-nav>
        (function()
        {
          // ---- DOM helpers
          const $  = (s)=>document.querySelector(s);
          const $$ = (s)=>Array.from(document.querySelectorAll(s));
          const isAdmin = @(Model.IsAdmin ? "true" : "false");
          const idForRealm = "@Html.IdFor(m => m.Realm)";

          // ---- Data from server (realm → displayName)
          const realmDescriptions = @Html.Raw(string.IsNullOrWhiteSpace(Model.RealmMapJson) ? "{}" : Model.RealmMapJson);

          // ---- Elements
          const realmSelect   = $('#realmSelect');
          const realmTitleEl  = $('#realmDescTitle');
          const realmBodyEl   = $('#realmDescBody');

          const btnPrev    = $('#btnPrev');
          const btnNext    = $('#btnNext');
          const btnCreate  = $('#btnCreate');
          const btnSkip    = $('#btnSkip');
          const createForm = document.getElementById('createForm');
          if (btnSkip) btnSkip.style.display = 'none';

          createForm?.addEventListener('keydown', (event) =>
          {
            if (event.key === 'Enter')
            {
              event.preventDefault();
            }
          });

          // Basics
          const cidPrefix = 'app-bank-';
          const cidInput  = $('#cidInput');
          const errCid    = $('#errCid');
          const descInput = $('#descInput');

          // Flows
          const swClientAuth = $('#swClientAuth');
          const swStandard   = $('#swStandard');
          const swService    = $('#swService');

          // AC (шаг 3)
          const appNameInput = $('#appName');
          const appUrlInput  = $('#appUrl');
          const ownerInput   = $('#serviceOwner');
          const managerInput = $('#serviceManager');
          const errAppName   = $('#errAppName');
          const creatioRequestInput = $('#creatioRequest');
          const creatioEmailInput   = $('#creatioEmail');
          const errCreatioNumber    = $('#errCreatioNumber');
          const errCreatioEmail     = $('#errCreatioEmail');

          // Redirects / Local / Service roles (чипы)
          const redirInput = $('#redirInput'), redirList = $('#redirList');
          const locInput   = $('#locInput'),   locList   = $('#locList');

          // Hidden fields (BindProperty)
          const hidClientId      = $('#hidClientId');
          const hidDesc          = $('#hidDesc');
          const hidClientAuth    = $('#hidClientAuth');
          const hidFlowStandard  = $('#hidFlowStandard');
          const hidFlowService   = $('#hidFlowService');
          const hidRedirects     = $('#hidRedirects');
          const hidLocalRoles    = $('#hidLocalRoles');
          const hidServiceRoles  = $('#hidServiceRoles');
          const hidAppName       = $('#hidAppName');
          const hidAppUrl        = $('#hidAppUrl');
          const hidServiceOwner  = $('#hidServiceOwner');
          const hidServiceManager= $('#hidServiceManager');
          const hidCreatioNumber = $('#hidCreatioRequestNumber');
          const hidCreatioEmail  = $('#hidCreatioSecretEmail');

          // ---- Chips data
          const redirs = @Html.Raw(string.IsNullOrWhiteSpace(Model.RedirectUrisJson) ? "[]" : Model.RedirectUrisJson);
          const locals = @Html.Raw(string.IsNullOrWhiteSpace(Model.LocalRolesJson) ? "[]" : Model.LocalRolesJson);
          renderChips(redirList, redirs);
          renderChips(locList,  locals);

          // ---- Panels & headers
          const panels = $$('[data-step]');
          const heads  = $$('[id^="stepHead"]');
          const stepNum = (el)=> +el.getAttribute('data-step') || +el.id.replace('stepHead','');
          const sortedStepIds = panels.map(stepNum).sort((a,b)=>a-b);

          // Условия включения шагов
          const predicates =
          {
            5: ()=> swStandard?.checked ?? true,
            7: ()=> swService?.checked  ?? false,
            8: ()=> isAdmin && (swClientAuth?.checked ?? false),
          };

          const enabledSteps = () => sortedStepIds.filter(n => (predicates[n] ? predicates[n]() : true));

          // ---- Realm description
          function updateRealmDesc()
          {
            const id = realmSelect?.value || '';
            if (realmTitleEl) realmTitleEl.textContent = id || 'Описание реалма';
            if (realmBodyEl)  realmBodyEl.textContent  = realmDescriptions[id] || 'Описание реалма отсутствует.';
            const realmHeader = document.getElementById('realmHeader');
            if (realmHeader) realmHeader.textContent = id || '—';
          }

          // ---- Validation
          const trim = (v)=> (v||'').trim();
          const emailRe = /^[^@@\s]+@@[^@@\s]+\.[^@@\s]+$/i;
          function validateStep(n)
          {
            $('#errRealm')?.classList.remove('show');
            errCid?.classList.remove('show');
            errAppName?.classList.remove('show');
            errCreatioNumber?.classList.remove('show');
            errCreatioEmail?.classList.remove('show');

            if (n===1)
            {
              if (!trim(realmSelect?.value)){ $('#errRealm')?.classList.add('show'); realmSelect?.focus(); return false; }
            }
            if (n===2)
            {
              if (!trim(cidInput?.value)){ errCid?.classList.add('show'); cidInput?.focus(); return false; }
            }
            if (n===3)
            {
              if (!trim(appNameInput?.value)){ errAppName?.classList.add('show'); appNameInput?.focus(); return false; }
            }
            if (n===8 && isAdmin && (swClientAuth?.checked ?? false))
            {
              if (!trim(creatioRequestInput?.value))
              {
                errCreatioNumber?.classList.add('show');
                creatioRequestInput?.focus();
                return false;
              }

              const emailValue = trim(creatioEmailInput?.value);
              if (!emailValue || !emailRe.test(emailValue))
              {
                errCreatioEmail?.classList.add('show');
                creatioEmailInput?.focus();
                return false;
              }
            }
            return true;
          }

          // ---- Enforce: Service account => Client Authentication
          function enforceServiceAuth() {
            if (swService?.checked) {
              if (swClientAuth) {
                swClientAuth.checked = true;
                swClientAuth.setAttribute('disabled','disabled');
              }
            } else {
              swClientAuth?.removeAttribute('disabled');
            }
          }
          swClientAuth?.addEventListener('change', () => {
            if (swService?.checked) swClientAuth.checked = true;
          });

          // ---- Step engine
          let current = 0;

          function setHeaderStates(en){
            const min = en[0], max = en[en.length-1];
            heads.forEach(h=>{
              const n = stepNum(h);
              const isEnabled = en.includes(n);
              h.style.opacity = isEnabled ? '1' : '.45';
              h.classList.toggle('active', isEnabled && n===current);
              h.classList.toggle('done',   isEnabled && n<current && n>=min);
            });
          }

          function showStep(requested){
            const en = enabledSteps();
            if (en.length===0) return;

            let target = en.includes(requested) ? requested : en.find(x=>x>=requested) ?? en[en.length-1];
            current = target;

            panels.forEach(p => p.classList.toggle('hidden', stepNum(p)!==current));
            setHeaderStates(en);

            const i = en.indexOf(current);
            const isFirst = (i===0), isLast = (i===en.length-1);
            btnPrev && (btnPrev.style.display = isFirst ? 'none' : '');
            btnNext && (btnNext.style.display = isLast  ? 'none' : '');
            btnCreate && (btnCreate.style.display = isLast ? '' : 'none');
          }

          function gotoRelative(delta)
          {
            if (delta>0 && !validateStep(current)) return;
            const en = enabledSteps();
            const i  = en.indexOf(current);
            const j  = Math.max(0, Math.min(en.length-1, i + delta));
            showStep(en[j]);
          }

          heads.forEach(h=>{
            h.addEventListener('click', ()=>{
              const en = enabledSteps();
              const target = stepNum(h);
              if (!en.includes(target)) return;
              for (const s of en){
                if (s===target) break;
                if (!validateStep(s)){ showStep(s); return; }
              }
              showStep(target);
            });
          });

          [swStandard, swService].forEach(el=> el?.addEventListener('change', ()=>{
            enforceServiceAuth();
            const en = enabledSteps();
            if (!en.includes(current)) showStep(en[en.length-1]);
            else showStep(current);
          }));

          btnPrev?.addEventListener('click', (e)=>{ e.preventDefault(); gotoRelative(-1); });
          btnNext?.addEventListener('click', (e)=>{ e.preventDefault(); gotoRelative(1); });

          if (realmSelect)
          {
            updateRealmDesc();
            realmSelect?.addEventListener('change', updateRealmDesc);
          }

          // Chips helpers
          function renderChips(listEl, arr){
            if (!listEl) return;
            listEl.innerHTML = '';
            arr.forEach((v, idx) => {
              const span = document.createElement('span');
              span.className = 'chip';
              span.textContent = v;

              const space = document.createTextNode(' ');
              const button = document.createElement('button');
              button.type = 'button';
              button.title = 'Remove';
              button.textContent = '×';

              button.addEventListener('click', ()=>{ arr.splice(idx,1); renderChips(listEl, arr); });

              span.appendChild(space);
              span.appendChild(button);
              listEl.appendChild(span);
            });
          }
          window.addRedirect = function(){
            const v = trim(redirInput?.value); if(!v) return;
            redirs.push(v); redirInput.value=''; renderChips(redirList, redirs);
          };
          window.addLocal = function(){
            const v = trim(locInput?.value); if(!v) return;
            const prefix = 'kc-gf-';
            const valueWithPrefix = v.startsWith(prefix) ? v : prefix + v;
            locals.push(valueWithPrefix); locInput.value=''; renderChips(locList, locals);
          };

          // Submit
          createForm?.addEventListener('submit', (e)=>
          {
            if (!validateStep(1) || !validateStep(2) || !validateStep(3)){
              e.preventDefault();
              if (!validateStep(1)) return showStep(1);
              if (!validateStep(2)) return showStep(2);
              if (!validateStep(3)) return showStep(3);
            }

            if (isAdmin && (swClientAuth?.checked ?? false) && !validateStep(8))
            {
              e.preventDefault();
              return showStep(8);
            }

            const suffix   = trim(cidInput?.value);
            const clientId = 'app-bank-' + suffix;

            hidClientId.value       = clientId;
            hidDesc.value           = trim(descInput?.value);
            hidClientAuth.value     = (swService?.checked || swClientAuth?.checked) ? 'true':'false'; // авто-включение
            hidFlowStandard.value   = swStandard?.checked   ? 'true':'false';
            hidFlowService.value    = swService?.checked    ? 'true':'false';

            hidRedirects.value      = JSON.stringify(redirs);
            hidLocalRoles.value     = JSON.stringify(locals);

            hidAppName.value        = trim(appNameInput?.value);
            hidAppUrl.value         = trim(appUrlInput?.value);
            hidServiceOwner.value   = trim(ownerInput?.value);
            hidServiceManager.value = trim(managerInput?.value);
            if (hidCreatioNumber) hidCreatioNumber.value = trim(creatioRequestInput?.value);
            if (hidCreatioEmail)  hidCreatioEmail.value  = trim(creatioEmailInput?.value);

            const submitter = (e.submitter instanceof HTMLElement) ? e.submitter : null;
            const loadingButton = submitter ?? btnCreate;
            if (loadingButton && !loadingButton.hasAttribute('data-loading'))
            {
              loadingButton.setAttribute('data-loading', 'true');
              loadingButton.setAttribute('disabled', 'disabled');
            }
            [btnPrev, btnNext, btnSkip].forEach(btn =>
            {
              if (btn) btn.setAttribute('disabled', 'disabled');
            });

          });

          // старт
          enforceServiceAuth();
          const _srv = Number(window.__stepToShow || 0);
          const _en  = enabledSteps();
          const _start = (_srv > 0 && _en.length) ? (_en.includes(_srv) ? _srv : (_en.find(x => x >= _srv) ?? _en[_en.length - 1])): (_en[0] ?? 1);
          showStep(_start);

          // локальные рендер-функции уже объявлены выше
          function renderChips(listEl, arr){
            if (!listEl) return;
            listEl.innerHTML = '';
            arr.forEach((v, idx) => {
              const span = document.createElement('span');
              span.className = 'chip';
              span.textContent = v;

              const space = document.createTextNode(' ');
              const button = document.createElement('button');
              button.type = 'button';
              button.title = 'Remove';
              button.textContent = '×';

              button.addEventListener('click', ()=>{ arr.splice(idx,1); renderChips(listEl, arr); });

              span.appendChild(space);
              span.appendChild(button);
              listEl.appendChild(span);
            });
          }
        })();
    </script>

    <script data-soft-nav>
        (() => {
          const archiveMeta = document.getElementById('secretArchiveMeta');
          if (archiveMeta)
          {
            const base64 = archiveMeta.getAttribute('data-base64') || '';
            const fileName = archiveMeta.getAttribute('data-filename') || 'client-secret.zip';
            const contentType = archiveMeta.getAttribute('data-content-type') || 'application/zip';

            if (base64)
            {
              try
              {
                const binary = atob(base64);
                const bytes = new Uint8Array(binary.length);
                for (let i = 0; i < binary.length; i++) bytes[i] = binary.charCodeAt(i);
                const blob = new Blob([bytes], { type: contentType });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = fileName;
                a.style.display = 'none';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                setTimeout(() => URL.revokeObjectURL(url), 2000);
              }
              catch (err)
              {
                console.error('Не удалось подготовить скачивание архива', err);
              }
            }

            archiveMeta.remove();
          }

          const modal = document.getElementById('creationModal');
          if (modal)
          {
            const panel = modal.querySelector('[data-modal-panel]');
            const prefersReducedMotion = () =>
              window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches;

            const animateSoftVisibility = (target, shouldShow) =>
            {
              if (!target || typeof target.animate !== 'function' || prefersReducedMotion())
              {
                return null;
              }

              const computed = window.getComputedStyle(target);
              const currentOpacity = parseFloat(computed.opacity);
              const startOpacity = isNaN(currentOpacity) ? (shouldShow ? 0 : 1) : currentOpacity;
              const startTransform = computed.transform && computed.transform !== 'none'
                ? computed.transform
                : (shouldShow ? 'translateY(12px)' : 'translateY(0px)');
              const endTransform = shouldShow ? 'translateY(0px)' : 'translateY(12px)';
              const endOpacity = shouldShow ? 1 : 0;

              const previousTransition = target.style.transition;
              target.style.transition = 'none';

              const previousWillChange = target.style.willChange;
              let willChangeOverridden = false;
              if (!previousWillChange)
              {
                target.style.willChange = 'opacity, transform';
                willChangeOverridden = true;
              }

              const midShowOpacity = Math.min(1, Math.max(startOpacity, 0.85));
              const midHideOpacity = Math.min(1, Math.max(endOpacity, startOpacity - 0.15));
              const keyframes = shouldShow
                ? [
                    { opacity: startOpacity, transform: startTransform },
                    { opacity: midShowOpacity, transform: 'translateY(-4px)', offset: 0.7 },
                    { opacity: endOpacity, transform: endTransform }
                  ]
                : [
                    { opacity: startOpacity, transform: startTransform },
                    { opacity: midHideOpacity, transform: 'translateY(6px)', offset: 0.35 },
                    { opacity: endOpacity, transform: endTransform }
                  ];

              let animation;
              try
              {
                animation = target.animate(keyframes, {
                  duration: shouldShow ? 420 : 320,
                  easing: shouldShow ? 'cubic-bezier(0.33, 1, 0.68, 1)' : 'cubic-bezier(0.4, 0, 0.2, 1)',
                  fill: 'forwards'
                });
              }
              catch (_)
              {
                target.style.transition = previousTransition;
                if (willChangeOverridden)
                {
                  target.style.willChange = previousWillChange;
                }
                return null;
              }

              let cleaned = false;
              const cleanup = () =>
              {
                if (cleaned)
                {
                  return;
                }
                cleaned = true;
                target.style.transition = previousTransition;
                if (willChangeOverridden)
                {
                  target.style.willChange = previousWillChange;
                }
              };

              return new Promise(resolve =>
              {
                const finalize = () =>
                {
                  cleanup();
                  resolve();
                };

                animation.addEventListener('finish', () =>
                {
                  if (typeof animation.commitStyles === 'function')
                  {
                    try
                    {
                      animation.commitStyles();
                    }
                    catch (_)
                    {
                      // Ignore browsers that throw for commitStyles.
                    }
                  }
                  animation.cancel();
                  finalize();
                }, { once: true });

                animation.addEventListener('cancel', finalize, { once: true });
              });
            };

            if (panel)
            {
              panel.style.opacity = '0';
              panel.style.transform = 'translateY(12px)';
              const enter = animateSoftVisibility(panel, true);
              if (enter && typeof enter.then === 'function')
              {
                enter.then(() =>
                {
                  panel.style.opacity = '';
                  panel.style.transform = '';
                });
              }
              else
              {
                panel.style.opacity = '';
                panel.style.transform = '';
              }
            }

            let closing = false;
            const keydownController = new AbortController();
            const detachKeydown = () =>
            {
              if (!keydownController.signal.aborted)
              {
                keydownController.abort();
              }
            };
            const close = () =>
            {
              if (closing)
              {
                return;
              }
              closing = true;
              detachKeydown();

              const exit = panel ? animateSoftVisibility(panel, false) : null;
              if (exit && typeof exit.then === 'function')
              {
                exit.then(() => modal.remove());
              }
              else
              {
                modal.remove();
              }
            };

            const onKeydown = (evt) =>
            {
              if (evt.key === 'Escape')
              {
                evt.preventDefault();
                close();
              }
            };

            document.addEventListener('keydown', onKeydown, { signal: keydownController.signal });

            const appRoot = document.getElementById('app');
            if (appRoot)
            {
              const handleSoftTeardown = () =>
              {
                detachKeydown();
                close();
              };
              appRoot.addEventListener('soft:teardown', handleSoftTeardown, { once: true });
            }

            modal.querySelectorAll('[data-close-modal]')
                 .forEach(btn => btn.addEventListener('click', close));
            modal.addEventListener('click', (evt) =>
            {
              if (evt.target === modal)
              {
                close();
              }
            });
          }
        })();
    </script>
    <!-- Service Roles module -->
    <script type="module" data-soft-nav>
        import { initServiceRoles } from '@Url.Content("~/js/service-roles.js")';

        const root = document.querySelector('[data-step="7"]');
        const hiddenInput = document.getElementById('@Html.IdFor(m => m.ServiceRolesJson)')
            || document.getElementById('hidServiceRoles')
            || document.querySelector('input[name="ServiceRolesJson"]');
        const realmSelect = document.getElementById('@Html.IdFor(m => m.Realm)')
            || document.getElementById('realmSelect')
            || document.querySelector('select[name="Realm"]');

        if (root && hiddenInput) {
            initServiceRoles(root, {
                pageUrl: '@Url.Page(null)',
                hiddenInput,
                realmInput: realmSelect,
                getRealm: () => (realmSelect?.value || '').trim()
            });
        }
    </script>
}
