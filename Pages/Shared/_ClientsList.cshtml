@using System
@using System.Linq
@model Assistant.Pages.ClientsPageModel

@{
    var currentPage = (ViewContext.RouteData.Values["page"] as string) ?? string.Empty;
    var returnUrl = string.IsNullOrEmpty(currentPage)
        ? null
        : Url.Page(currentPage, new { q = Model.Q, pageNumber = Model.PageNumber });
}

@if (!Model.Clients.Any() && Model.ShowEmptyMessage)
{
    <div class="kc-card p-10 text-center">
        <div class="text-slate-200 text-lg font-semibold mb-1">Нет клиентов</div>
        <div class="text-slate-400 text-sm">Попробуйте другой поиск или создайте нового клиента.</div>
    </div>
}
else if (Model.Clients.Any())
{
    <!-- Сетка карточек клиентов -->
    <div class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
        @foreach (var c in Model.Clients)
        {
            // один раз материализуем, чтобы не итерировать несколько раз
            var envList = Model.Envs(c.Realm).ToList();
            var displayName = c.DisplayName;
            var hasCustomName = !string.Equals(displayName, c.ClientId, StringComparison.OrdinalIgnoreCase);
            var customName = hasCustomName ? displayName : null;
            var baseForInitials = hasCustomName ? displayName : c.ClientId;
            baseForInitials ??= string.Empty;
            var trimmed = baseForInitials.Trim();
            var parts = trimmed.Split(new[] { ' ', '-', '_', '.', '/' }, StringSplitOptions.RemoveEmptyEntries);
            var initials = string.Concat(parts.Take(2).Select(part => char.ToUpperInvariant(part[0])));

            if (string.IsNullOrWhiteSpace(initials))
            {
                var fallback = trimmed.Length > 0 ? trimmed : (c.ClientId ?? string.Empty);
                fallback = fallback.Trim();

                if (fallback.Length == 0)
                {
                    fallback = "KC";
                }

                initials = fallback.Substring(0, System.Math.Min(2, fallback.Length)).ToUpperInvariant();
            }

            <a asp-page="/Clients/Details" asp-route-realm="@c.Realm" asp-route-clientId="@c.ClientId"
               asp-route-returnUrl="@returnUrl"
               class="block group client-card"
                data-search="@($"{c.ClientId} {c.Realm} {displayName}")">
                <span class="client-card__halo" aria-hidden="true"></span>
                <div class="kc-card kc-card--hover client-card__body">
                    @if (envList.Any())
                    {
                        <div class="client-card__env-stripe" aria-hidden="true">
                            @foreach (var e in envList)
                            {
                                <span class="client-card__env-segment bg-gradient-to-r @Model.EnvBarGradient(e)"></span>
                            }
                        </div>
                    }

                    <div class="client-card__background" aria-hidden="true"></div>
                    <div class="client-card__glare" aria-hidden="true"></div>

                    <div class="client-card__content">
                        <div class="client-card__header">
                            <div class="client-card__avatar" aria-hidden="true">
                                <span class="client-card__avatar-text">@initials</span>
                            </div>

                            <div class="client-card__title-block">
                                <div class="client-card__id" title="@c.ClientId">@c.ClientId</div>
                                @if (!string.IsNullOrEmpty(customName))
                                {
                                    <div class="client-card__name" title="@customName">@customName</div>
                                }
                            </div>

                            <span class="client-card__status @(c.Enabled ? "is-enabled" : "is-disabled")">
                                <span class="client-card__status-dot" aria-hidden="true"></span>
                                @(c.Enabled ? "Активен" : "Отключен")
                            </span>
                        </div>

                        <div class="client-card__realm-row">
                            <span class="client-card__realm-chip" title="Realm">
                                <svg class="client-card__realm-icon" viewBox="0 0 20 20" fill="none" aria-hidden="true">
                                    <path d="M3 7.5L10 3l7 4.5v5L10 17l-7-4.5v-5Z" stroke="currentColor" stroke-width="1.4" stroke-linejoin="round"></path>
                                    <path d="M3 7.5l7 4.5 7-4.5" stroke="currentColor" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round" opacity=".7"></path>
                                    <path d="M10 17V12" stroke="currentColor" stroke-width="1.4" stroke-linecap="round" opacity=".7"></path>
                                </svg>
                                <span>@c.Realm</span>
                            </span>
                        </div>

                        <div class="client-card__flows" role="list" aria-label="Активные потоки">
                            <span class="client-card__flow @(c.FlowStandard ? "is-active" : "is-muted")" role="listitem" title="Authorization Code Flow">
                                <svg viewBox="0 0 20 20" fill="none" aria-hidden="true">
                                    <rect x="4" y="8" width="12" height="8" rx="2.5" stroke="currentColor" stroke-width="1.4" opacity=".85"></rect>
                                    <path d="M7 8V6.5a3 3 0 116 0V8" stroke="currentColor" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"></path>
                                    <circle cx="10" cy="12" r="1" fill="currentColor"></circle>
                                </svg>
                                <span>Auth Code</span>
                            </span>
                            <span class="client-card__flow @(c.FlowService ? "is-active" : "is-muted")" role="listitem" title="Client Credentials Flow">
                                <svg viewBox="0 0 20 20" fill="none" aria-hidden="true">
                                    <rect x="3" y="4" width="14" height="4.5" rx="1.8" stroke="currentColor" stroke-width="1.4" opacity=".85"></rect>
                                    <rect x="3" y="10" width="14" height="4.5" rx="1.8" stroke="currentColor" stroke-width="1.4" opacity=".65"></rect>
                                    <path d="M6 6.25h1.5" stroke="currentColor" stroke-width="1.4" stroke-linecap="round"></path>
                                    <path d="M6 12.25h1.5" stroke="currentColor" stroke-width="1.4" stroke-linecap="round" opacity=".7"></path>
                                    <path d="M10 12.25h4" stroke="currentColor" stroke-width="1.4" stroke-linecap="round" opacity=".7"></path>
                                </svg>
                                <span>Service</span>
                            </span>
                        </div>

                        <div class="client-card__footer">
                            @if (envList.Any())
                            {
                                <div class="client-card__envs" aria-label="Окружения">
                                    @foreach (var e in envList)
                                    {
                                        <span class="kc-chip">@e</span>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="client-card__envs client-card__envs--empty" aria-label="Окружения">
                                    <span class="kc-chip kc-chip--ghost">Окружения не указаны</span>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </a>
        }
    </div>

    @if (Model.TotalPages > 1)
    {
        <div class="flex justify-center mt-6">
            <nav class="flex items-center gap-2">
                @if (Model.HasPreviousPage)
                {
                    <form method="get" asp-page="@currentPage" class="inline-flex" data-soft-transition="#clientsResults">
                        <input type="hidden" name="q" value="@Model.Q" />
                        <input type="hidden" name="pageNumber" value="@(Model.PageNumber - 1)" />
                        <button type="submit" class="btn-subtle">Предыдущая</button>
                    </form>
                }
                <span class="text-sm text-slate-400">Страница @Model.PageNumber of @Model.TotalPages</span>
                @if (Model.HasNextPage)
                {
                    <form method="get" asp-page="@currentPage" class="inline-flex" data-soft-transition="#clientsResults">
                        <input type="hidden" name="q" value="@Model.Q" />
                        <input type="hidden" name="pageNumber" value="@(Model.PageNumber + 1)" />
                        <button type="submit" class="btn-subtle">Следующая</button>
                    </form>
                }
            </nav>
        </div>
    }
}
